
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.resources.templates.email.list.params;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * ListRequest
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListRequest.Builder.class)
public final class ListRequest {
    /**
     * (Optional) Positive Number
     *
     * Maximum number of templates to retrieve. Default to 100 if not provided, with a maximum acceptable value of 1000.
     */
    private final Optional<Integer> limit;
    /**
     * (Optional) String in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     *
     * Retrieve only templates updated at or after the given time.
     */
    private final Optional<String> modifiedAfter;
    /**
     * (Optional) String in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     *
     * Retrieve only templates updated at or before the given time.
     */
    private final Optional<String> modifiedBefore;
    /**
     * (Optional) Positive Number
     *
     * Number of templates to skip before returning rest of the templates that fit the search criteria.
     */
    private final Optional<Integer> offset;

    private ListRequest(
        Optional<Integer> limit,
        Optional<String> modifiedAfter,
        Optional<String> modifiedBefore,
        Optional<Integer> offset
    ) {
        this.limit = limit;
        this.modifiedAfter = modifiedAfter;
        this.modifiedBefore = modifiedBefore;
        this.offset = offset;
    }

    /**
     * Retrieves value for `limit`
     * (Optional) Positive Number
     *
     * Maximum number of templates to retrieve. Default to 100 if not provided, with a maximum acceptable value of 1000.
     */
    @JsonProperty("limit")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public Integer getLimit() {
        return limit.orElse(null);
    }

    /**
     * Retrieves value for `modifiedAfter`
     * (Optional) String in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     *
     * Retrieve only templates updated at or after the given time.
     */
    @JsonProperty("modified_after")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getModifiedAfter() {
        return modifiedAfter.orElse(null);
    }

    /**
     * Retrieves value for `modifiedBefore`
     * (Optional) String in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
     *
     * Retrieve only templates updated at or before the given time.
     */
    @JsonProperty("modified_before")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getModifiedBefore() {
        return modifiedBefore.orElse(null);
    }

    /**
     * Retrieves value for `offset`
     * (Optional) Positive Number
     *
     * Number of templates to skip before returning rest of the templates that fit the search criteria.
     */
    @JsonProperty("offset")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public Integer getOffset() {
        return offset.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof ListRequest && equalTo((ListRequest) other);
    }

    private boolean equalTo(ListRequest other) {
        return
            limit.equals(other.limit) &&

            modifiedAfter.equals(other.modifiedAfter) &&

            modifiedBefore.equals(other.modifiedBefore) &&

            offset.equals(other.offset)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.limit,
                   this.modifiedAfter,
                   this.modifiedBefore,
                   this.offset
               );
    }

    @Override
    public String toString() {
        return "ListRequest{" +
               "limit=" + limit +
               "modifiedAfter=" + modifiedAfter +
               "modifiedBefore=" + modifiedBefore +
               "offset=" + offset +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        /**
         * (Optional) Positive Number
         *
         * Maximum number of templates to retrieve. Default to 100 if not provided, with a maximum acceptable value of 1000.
         */
        private Optional<Integer> limit = Optional.empty();
        /**
         * (Optional) String in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         *
         * Retrieve only templates updated at or after the given time.
         */
        private Optional<String> modifiedAfter = Optional.empty();
        /**
         * (Optional) String in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         *
         * Retrieve only templates updated at or before the given time.
         */
        private Optional<String> modifiedBefore = Optional.empty();
        /**
         * (Optional) Positive Number
         *
         * Number of templates to skip before returning rest of the templates that fit the search criteria.
         */
        private Optional<Integer> offset = Optional.empty();

        private Builder() {}

        public Builder from(ListRequest other) {
            limit(other.getLimit());
            modifiedAfter(other.getModifiedAfter());
            modifiedBefore(other.getModifiedBefore());
            offset(other.getOffset());
            return this;
        }

        /**
         * Sets value for `limit`
         * (Optional) Positive Number
         *
         * Maximum number of templates to retrieve. Default to 100 if not provided, with a maximum acceptable value of 1000.
         */
        @JsonSetter("limit")
        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);

            return this;
        }

        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Sets value for `modifiedAfter`
         * (Optional) String in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         *
         * Retrieve only templates updated at or after the given time.
         */
        @JsonSetter("modified_after")
        public Builder modifiedAfter(String modifiedAfter) {
            this.modifiedAfter = Optional.ofNullable(modifiedAfter);

            return this;
        }

        public Builder modifiedAfter(Optional<String> modifiedAfter) {
            this.modifiedAfter = modifiedAfter;
            return this;
        }

        /**
         * Sets value for `modifiedBefore`
         * (Optional) String in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
         *
         * Retrieve only templates updated at or before the given time.
         */
        @JsonSetter("modified_before")
        public Builder modifiedBefore(String modifiedBefore) {
            this.modifiedBefore = Optional.ofNullable(modifiedBefore);

            return this;
        }

        public Builder modifiedBefore(Optional<String> modifiedBefore) {
            this.modifiedBefore = modifiedBefore;
            return this;
        }

        /**
         * Sets value for `offset`
         * (Optional) Positive Number
         *
         * Number of templates to skip before returning rest of the templates that fit the search criteria.
         */
        @JsonSetter("offset")
        public Builder offset(Integer offset) {
            this.offset = Optional.ofNullable(offset);

            return this;
        }

        public Builder offset(Optional<Integer> offset) {
            this.offset = offset;
            return this;
        }


        public ListRequest build() {
            return new ListRequest(
                       limit,
                       modifiedAfter,
                       modifiedBefore,
                       offset
                   );
        }
    }

}



