
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.resources.catalogs.items.params;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.yourorg.brazejava.model.CatalogsItemsUpdate1Body;


/**
 * Update1Request
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Update1Request.Builder.class)
public final class Update1Request {
    private final Optional<CatalogsItemsUpdate1Body> data;
    private final String catalogName;
    private final String itemId;

    private Update1Request(
        Optional<CatalogsItemsUpdate1Body> data,
        String catalogName,
        String itemId
    ) {
        this.data = data;
        this.catalogName = catalogName;
        this.itemId = itemId;
    }

    /**
     * Retrieves value for `data`
     */
    @JsonProperty("data")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public CatalogsItemsUpdate1Body getData() {
        return data.orElse(null);
    }

    /**
     * Retrieves value for `catalogName`
     */
    @JsonProperty("catalog_name")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getCatalogName() {
        return catalogName;
    }

    /**
     * Retrieves value for `itemId`
     */
    @JsonProperty("item_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getItemId() {
        return itemId;
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof Update1Request && equalTo((Update1Request) other);
    }

    private boolean equalTo(Update1Request other) {
        return
            data.equals(other.data) &&

            catalogName.equals(other.catalogName) &&

            itemId.equals(other.itemId)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.data,
                   this.catalogName,
                   this.itemId
               );
    }

    @Override
    public String toString() {
        return "Update1Request{" +
               "data=" + data +
               "catalogName=" + catalogName +
               "itemId=" + itemId +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<CatalogsItemsUpdate1Body> data = Optional.empty();
        private String catalogName = null;
        private String itemId = null;

        private Builder() {}

        public Builder from(Update1Request other) {
            data(other.getData());
            catalogName(other.getCatalogName());
            itemId(other.getItemId());
            return this;
        }

        /**
         * Sets value for `data`
         */
        @JsonSetter("data")
        public Builder data(CatalogsItemsUpdate1Body data) {
            this.data = Optional.ofNullable(data);

            return this;
        }

        public Builder data(Optional<CatalogsItemsUpdate1Body> data) {
            this.data = data;
            return this;
        }

        /**
         * Sets value for `catalogName`
         */
        @JsonSetter("catalog_name")
        public Builder catalogName(String catalogName) {
            if (catalogName == null) {
                throw new IllegalArgumentException("catalogName cannot be null");
            }

            this.catalogName = catalogName;

            return this;
        }


        /**
         * Sets value for `itemId`
         */
        @JsonSetter("item_id")
        public Builder itemId(String itemId) {
            if (itemId == null) {
                throw new IllegalArgumentException("itemId cannot be null");
            }

            this.itemId = itemId;

            return this;
        }



        public Update1Request build() {
            if (catalogName == null) {
                throw new IllegalStateException("catalogName is required");
            }

            if (itemId == null) {
                throw new IllegalStateException("itemId is required");
            }

            return new Update1Request(
                       data,
                       catalogName,
                       itemId
                   );
        }
    }

}



