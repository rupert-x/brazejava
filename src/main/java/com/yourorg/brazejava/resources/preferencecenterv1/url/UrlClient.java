
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.resources.preferencecenterv1.url;

import java.io.IOException;
import java.util.Map;

import com.fasterxml.jackson.core.type.TypeReference;
import com.yourorg.brazejava.core.ApiException;
import com.yourorg.brazejava.core.BaseClient;
import com.yourorg.brazejava.core.HttpRequestBuilder;
import com.yourorg.brazejava.core.RequestOptions;
import com.yourorg.brazejava.core.ResponseHandler;
import com.yourorg.brazejava.resources.preferencecenterv1.url.params.GetRequest;


public class UrlClient {
    protected final BaseClient baseClient;

    public UrlClient(BaseClient baseClient) {
        this.baseClient = baseClient;

    }

    /**
    * Generate Preference Center URL
    *
    * > Use this endpoint to generate a URL for a preference center.
    *
    *
    * To use this endpoint, you’ll need to generate an API key with the `preference_center.user.get` permission.
    *
    * Each preference center URL is unique to each user.
    *
    * ## Rate limit
    *
    * This endpoint has a rate limit of 1,000 requests per minute, per workspace.
    *
    * ## Path parameters
    *
    * | Parameter | Required | Data Type | Description |
    * | --- | --- | --- | --- |
    * | `preferenceCenterExternalID` | Required | String | The ID for your preference center. |
    * | `userID` | Required | String | The user ID. |
    *
    * ## Example request
    *
    * ```
    * curl --location --request GET 'https://rest.iad-01.braze.com/preference_center/v1/$preference_center_external_id/url/$user_external_id' \
    * --header 'Authorization: Bearer YOUR-API-KEY-HERE'
    *
    * ```
    *
    * ## Response
    *
    * ``` json
    * {
    *   "preference_center_url": "https://www.example.com/preferences"
    * }
    *
    * ```
    *
    * GET /preference_center_v1/{PreferenceCenterExternalID}/url/{UserID}
    */
    public Map<?, ?> get(GetRequest request) {
        return get(request, null);
    }


    /**
    * Generate Preference Center URL
    *
    * > Use this endpoint to generate a URL for a preference center.
    *
    *
    * To use this endpoint, you’ll need to generate an API key with the `preference_center.user.get` permission.
    *
    * Each preference center URL is unique to each user.
    *
    * ## Rate limit
    *
    * This endpoint has a rate limit of 1,000 requests per minute, per workspace.
    *
    * ## Path parameters
    *
    * | Parameter | Required | Data Type | Description |
    * | --- | --- | --- | --- |
    * | `preferenceCenterExternalID` | Required | String | The ID for your preference center. |
    * | `userID` | Required | String | The user ID. |
    *
    * ## Example request
    *
    * ```
    * curl --location --request GET 'https://rest.iad-01.braze.com/preference_center/v1/$preference_center_external_id/url/$user_external_id' \
    * --header 'Authorization: Bearer YOUR-API-KEY-HERE'
    *
    * ```
    *
    * ## Response
    *
    * ``` json
    * {
    *   "preference_center_url": "https://www.example.com/preferences"
    * }
    *
    * ```
    *
    * GET /preference_center_v1/{PreferenceCenterExternalID}/url/{UserID}
    */
    public Map<?, ?> get(GetRequest request, RequestOptions requestOptions) {

        try {
            okhttp3.Response response = new HttpRequestBuilder()
            .baseUrl(this.baseClient.baseUrl())
            .path("/preference_center_v1/{PreferenceCenterExternalID}/url/{UserID}")
            .addPathParam("PreferenceCenterExternalID", request.getPreferenceCenterExternalId())
            .addPathParam("UserID", request.getUserId())
            .addQueryParam("external_id", request.getExternalId(), "form", true)
            .addQueryParam("preference_center_api_id", request.getPreferenceCenterApiId(), "form", true)
            .method("GET")
            .addAuth(baseClient.getAuth("BearerAuth"))
            .execute();
            return ResponseHandler.processJsonResponse(response, new TypeReference<Map<?, ?>>() {});
        } catch (IOException e) {
            throw new ApiException("Error executing HTTP request", e);
        }
    }


}
