
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.resources.preferencecenterv1.url.params;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * GetRequest
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetRequest.Builder.class)
public final class GetRequest {
    private final String preferenceCenterExternalId;
    private final String userId;
    /**
     * (Required) String
     */
    private final Optional<String> externalId;
    private final Optional<String> preferenceCenterApiId;

    private GetRequest(
        String preferenceCenterExternalId,
        String userId,
        Optional<String> externalId,
        Optional<String> preferenceCenterApiId
    ) {
        this.preferenceCenterExternalId = preferenceCenterExternalId;
        this.userId = userId;
        this.externalId = externalId;
        this.preferenceCenterApiId = preferenceCenterApiId;
    }

    /**
     * Retrieves value for `preferenceCenterExternalId`
     */
    @JsonProperty("PreferenceCenterExternalID")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getPreferenceCenterExternalId() {
        return preferenceCenterExternalId;
    }

    /**
     * Retrieves value for `userId`
     */
    @JsonProperty("UserID")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getUserId() {
        return userId;
    }

    /**
     * Retrieves value for `externalId`
     * (Required) String
     */
    @JsonProperty("external_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getExternalId() {
        return externalId.orElse(null);
    }

    /**
     * Retrieves value for `preferenceCenterApiId`
     */
    @JsonProperty("preference_center_api_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getPreferenceCenterApiId() {
        return preferenceCenterApiId.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof GetRequest && equalTo((GetRequest) other);
    }

    private boolean equalTo(GetRequest other) {
        return
            preferenceCenterExternalId.equals(other.preferenceCenterExternalId) &&

            userId.equals(other.userId) &&

            externalId.equals(other.externalId) &&

            preferenceCenterApiId.equals(other.preferenceCenterApiId)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.preferenceCenterExternalId,
                   this.userId,
                   this.externalId,
                   this.preferenceCenterApiId
               );
    }

    @Override
    public String toString() {
        return "GetRequest{" +
               "preferenceCenterExternalId=" + preferenceCenterExternalId +
               "userId=" + userId +
               "externalId=" + externalId +
               "preferenceCenterApiId=" + preferenceCenterApiId +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private String preferenceCenterExternalId = null;
        private String userId = null;
        /**
         * (Required) String
         */
        private Optional<String> externalId = Optional.empty();
        private Optional<String> preferenceCenterApiId = Optional.empty();

        private Builder() {}

        public Builder from(GetRequest other) {
            preferenceCenterExternalId(other.getPreferenceCenterExternalId());
            userId(other.getUserId());
            externalId(other.getExternalId());
            preferenceCenterApiId(other.getPreferenceCenterApiId());
            return this;
        }

        /**
         * Sets value for `preferenceCenterExternalId`
         */
        @JsonSetter("PreferenceCenterExternalID")
        public Builder preferenceCenterExternalId(String preferenceCenterExternalId) {
            if (preferenceCenterExternalId == null) {
                throw new IllegalArgumentException("preferenceCenterExternalId cannot be null");
            }

            this.preferenceCenterExternalId = preferenceCenterExternalId;

            return this;
        }


        /**
         * Sets value for `userId`
         */
        @JsonSetter("UserID")
        public Builder userId(String userId) {
            if (userId == null) {
                throw new IllegalArgumentException("userId cannot be null");
            }

            this.userId = userId;

            return this;
        }


        /**
         * Sets value for `externalId`
         * (Required) String
         */
        @JsonSetter("external_id")
        public Builder externalId(String externalId) {
            this.externalId = Optional.ofNullable(externalId);

            return this;
        }

        public Builder externalId(Optional<String> externalId) {
            this.externalId = externalId;
            return this;
        }

        /**
         * Sets value for `preferenceCenterApiId`
         */
        @JsonSetter("preference_center_api_id")
        public Builder preferenceCenterApiId(String preferenceCenterApiId) {
            this.preferenceCenterApiId = Optional.ofNullable(preferenceCenterApiId);

            return this;
        }

        public Builder preferenceCenterApiId(Optional<String> preferenceCenterApiId) {
            this.preferenceCenterApiId = preferenceCenterApiId;
            return this;
        }


        public GetRequest build() {
            if (preferenceCenterExternalId == null) {
                throw new IllegalStateException("preferenceCenterExternalId is required");
            }

            if (userId == null) {
                throw new IllegalStateException("userId is required");
            }

            return new GetRequest(
                       preferenceCenterExternalId,
                       userId,
                       externalId,
                       preferenceCenterApiId
                   );
        }
    }

}



