
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.resources.subscription.status.get;

import java.io.IOException;
import java.util.Map;

import com.fasterxml.jackson.core.type.TypeReference;
import com.yourorg.brazejava.core.ApiException;
import com.yourorg.brazejava.core.BaseClient;
import com.yourorg.brazejava.core.HttpRequestBuilder;
import com.yourorg.brazejava.core.RequestOptions;
import com.yourorg.brazejava.core.ResponseHandler;
import com.yourorg.brazejava.resources.subscription.status.get.params.ListRequest;


public class GetClient {
    protected final BaseClient baseClient;

    public GetClient(BaseClient baseClient) {
        this.baseClient = baseClient;

    }

    /**
    * List User's  Subscription Group Status - SMS
    *
    * > Use this endpoint to get the subscription state of a user in a subscription group.
    *
    *
    * To use this endpoint, you’ll need to generate an API key with the `subscription.status.get` permission.
    *
    * These groups will be available on the **Subscription Group** page. The response from this endpoint will include the external ID and either subscribed, unsubscribed, or unknown for the specific subscription group requested in the API call. This can be used to update the subscription group state in subsequent API calls or to be displayed on a hosted web page.
    *
    * \*Either `external_id` or `phone` are required. When both are submitted, only the external_id is used for querying and the phone number is applied to that user.
    *
    * ## Rate limit
    *
    * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
    *
    * ## Response
    *
    * All successful responses will return `subscribed`, `unsubscribed`, or `unknown` depending on status and user history with the subscription group.
    *
    * ``` json
    * Content-Type: application/json
    * Authorization: Bearer YOUR-REST-API-KEY
    * {
    *   "status": {
    *     "1": "Unsubscribed",
    *     "2": "Subscribed"
    *   },
    *   "message": "success"
    * }
    *
    * ```
    *
    * GET /subscription/status/get
    */
    public Map<?, ?> list() {
        return list(ListRequest.builder().build(), null);
    }


    /**
    * List User's  Subscription Group Status - SMS
    *
    * > Use this endpoint to get the subscription state of a user in a subscription group.
    *
    *
    * To use this endpoint, you’ll need to generate an API key with the `subscription.status.get` permission.
    *
    * These groups will be available on the **Subscription Group** page. The response from this endpoint will include the external ID and either subscribed, unsubscribed, or unknown for the specific subscription group requested in the API call. This can be used to update the subscription group state in subsequent API calls or to be displayed on a hosted web page.
    *
    * \*Either `external_id` or `phone` are required. When both are submitted, only the external_id is used for querying and the phone number is applied to that user.
    *
    * ## Rate limit
    *
    * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
    *
    * ## Response
    *
    * All successful responses will return `subscribed`, `unsubscribed`, or `unknown` depending on status and user history with the subscription group.
    *
    * ``` json
    * Content-Type: application/json
    * Authorization: Bearer YOUR-REST-API-KEY
    * {
    *   "status": {
    *     "1": "Unsubscribed",
    *     "2": "Subscribed"
    *   },
    *   "message": "success"
    * }
    *
    * ```
    *
    * GET /subscription/status/get
    */
    public Map<?, ?> list(ListRequest request) {
        return list(request, null);
    }


    /**
    * List User's  Subscription Group Status - SMS
    *
    * > Use this endpoint to get the subscription state of a user in a subscription group.
    *
    *
    * To use this endpoint, you’ll need to generate an API key with the `subscription.status.get` permission.
    *
    * These groups will be available on the **Subscription Group** page. The response from this endpoint will include the external ID and either subscribed, unsubscribed, or unknown for the specific subscription group requested in the API call. This can be used to update the subscription group state in subsequent API calls or to be displayed on a hosted web page.
    *
    * \*Either `external_id` or `phone` are required. When both are submitted, only the external_id is used for querying and the phone number is applied to that user.
    *
    * ## Rate limit
    *
    * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
    *
    * ## Response
    *
    * All successful responses will return `subscribed`, `unsubscribed`, or `unknown` depending on status and user history with the subscription group.
    *
    * ``` json
    * Content-Type: application/json
    * Authorization: Bearer YOUR-REST-API-KEY
    * {
    *   "status": {
    *     "1": "Unsubscribed",
    *     "2": "Subscribed"
    *   },
    *   "message": "success"
    * }
    *
    * ```
    *
    * GET /subscription/status/get
    */
    public Map<?, ?> list(ListRequest request, RequestOptions requestOptions) {

        try {
            okhttp3.Response response = new HttpRequestBuilder()
            .baseUrl(this.baseClient.baseUrl())
            .path("/subscription/status/get")
            .addQueryParam("external_id", request.getExternalId(), "form", true)
            .addQueryParam("phone", request.getPhone(), "form", true)
            .addQueryParam("subscription_group_id", request.getSubscriptionGroupId(), "form", true)
            .method("GET")
            .addAuth(baseClient.getAuth("BearerAuth"))
            .execute();
            return ResponseHandler.processJsonResponse(response, new TypeReference<Map<?, ?>>() {});
        } catch (IOException e) {
            throw new ApiException("Error executing HTTP request", e);
        }
    }


}
