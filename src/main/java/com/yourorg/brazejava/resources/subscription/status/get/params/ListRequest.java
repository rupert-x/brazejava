
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.resources.subscription.status.get.params;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * ListRequest
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListRequest.Builder.class)
public final class ListRequest {
    /**
     * (Required*) String
     *
     * The `external_id` of the user (must include at least one and at most 50 `external_ids`).
     *
     * When both an `external_id` and `phone` are submitted, only the external_id(s) provided will be applied to the result query.
     *
     */
    private final Optional<String> externalId;
    /**
     * (Required*) String in [E.164](https://en.wikipedia.org/wiki/E.164) format
     *
     * The phone number of the user (must include at least one phone number and at most 50 phone numbers).
     */
    private final Optional<String> phone;
    /**
     * (Required) String
     *
     * The `id` of your subscription group.
     */
    private final Optional<String> subscriptionGroupId;

    private ListRequest(
        Optional<String> externalId,
        Optional<String> phone,
        Optional<String> subscriptionGroupId
    ) {
        this.externalId = externalId;
        this.phone = phone;
        this.subscriptionGroupId = subscriptionGroupId;
    }

    /**
     * Retrieves value for `externalId`
     * (Required*) String
     *
     * The `external_id` of the user (must include at least one and at most 50 `external_ids`).
     *
     * When both an `external_id` and `phone` are submitted, only the external_id(s) provided will be applied to the result query.
     *
     */
    @JsonProperty("external_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getExternalId() {
        return externalId.orElse(null);
    }

    /**
     * Retrieves value for `phone`
     * (Required*) String in [E.164](https://en.wikipedia.org/wiki/E.164) format
     *
     * The phone number of the user (must include at least one phone number and at most 50 phone numbers).
     */
    @JsonProperty("phone")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getPhone() {
        return phone.orElse(null);
    }

    /**
     * Retrieves value for `subscriptionGroupId`
     * (Required) String
     *
     * The `id` of your subscription group.
     */
    @JsonProperty("subscription_group_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getSubscriptionGroupId() {
        return subscriptionGroupId.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof ListRequest && equalTo((ListRequest) other);
    }

    private boolean equalTo(ListRequest other) {
        return
            externalId.equals(other.externalId) &&

            phone.equals(other.phone) &&

            subscriptionGroupId.equals(other.subscriptionGroupId)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.externalId,
                   this.phone,
                   this.subscriptionGroupId
               );
    }

    @Override
    public String toString() {
        return "ListRequest{" +
               "externalId=" + externalId +
               "phone=" + phone +
               "subscriptionGroupId=" + subscriptionGroupId +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        /**
         * (Required*) String
         *
         * The `external_id` of the user (must include at least one and at most 50 `external_ids`).
         *
         * When both an `external_id` and `phone` are submitted, only the external_id(s) provided will be applied to the result query.
         *
         */
        private Optional<String> externalId = Optional.empty();
        /**
         * (Required*) String in [E.164](https://en.wikipedia.org/wiki/E.164) format
         *
         * The phone number of the user (must include at least one phone number and at most 50 phone numbers).
         */
        private Optional<String> phone = Optional.empty();
        /**
         * (Required) String
         *
         * The `id` of your subscription group.
         */
        private Optional<String> subscriptionGroupId = Optional.empty();

        private Builder() {}

        public Builder from(ListRequest other) {
            externalId(other.getExternalId());
            phone(other.getPhone());
            subscriptionGroupId(other.getSubscriptionGroupId());
            return this;
        }

        /**
         * Sets value for `externalId`
         * (Required*) String
         *
         * The `external_id` of the user (must include at least one and at most 50 `external_ids`).
         *
         * When both an `external_id` and `phone` are submitted, only the external_id(s) provided will be applied to the result query.
         *
         */
        @JsonSetter("external_id")
        public Builder externalId(String externalId) {
            this.externalId = Optional.ofNullable(externalId);

            return this;
        }

        public Builder externalId(Optional<String> externalId) {
            this.externalId = externalId;
            return this;
        }

        /**
         * Sets value for `phone`
         * (Required*) String in [E.164](https://en.wikipedia.org/wiki/E.164) format
         *
         * The phone number of the user (must include at least one phone number and at most 50 phone numbers).
         */
        @JsonSetter("phone")
        public Builder phone(String phone) {
            this.phone = Optional.ofNullable(phone);

            return this;
        }

        public Builder phone(Optional<String> phone) {
            this.phone = phone;
            return this;
        }

        /**
         * Sets value for `subscriptionGroupId`
         * (Required) String
         *
         * The `id` of your subscription group.
         */
        @JsonSetter("subscription_group_id")
        public Builder subscriptionGroupId(String subscriptionGroupId) {
            this.subscriptionGroupId = Optional.ofNullable(subscriptionGroupId);

            return this;
        }

        public Builder subscriptionGroupId(Optional<String> subscriptionGroupId) {
            this.subscriptionGroupId = subscriptionGroupId;
            return this;
        }


        public ListRequest build() {
            return new ListRequest(
                       externalId,
                       phone,
                       subscriptionGroupId
                   );
        }
    }

}



