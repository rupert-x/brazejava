
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.resources.canvas.list;

import java.io.IOException;
import java.util.Map;

import com.fasterxml.jackson.core.type.TypeReference;
import com.yourorg.brazejava.core.ApiException;
import com.yourorg.brazejava.core.BaseClient;
import com.yourorg.brazejava.core.HttpRequestBuilder;
import com.yourorg.brazejava.core.RequestOptions;
import com.yourorg.brazejava.core.ResponseHandler;
import com.yourorg.brazejava.resources.canvas.list.params.ListRequest;


public class ListClient {
    protected final BaseClient baseClient;

    public ListClient(BaseClient baseClient) {
        this.baseClient = baseClient;

    }

    /**
    * Export Canvas List
    *
    * > Use this endpoint to export a list of Canvases, including the name, Canvas API identifier and associated tags.
    *
    *
    * Canvases are returned in groups of 100 sorted by time of creation (oldest to newest by default).
    *
    * Archived Canvases will not be included in the API response unless the `include_archived` field is specified. Canvases that are stopped but not archived, however, will be returned by default.
    *
    * To use this endpoint, you’ll need to generate an API key with the `canvas.list` permission.
    *
    * ## Rate limit
    *
    * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
    *
    * ## Response
    *
    * ``` json
    * Content-Type: application/json
    * Authorization: Bearer YOUR-REST-API-KEY
    * {
    *   "canvases" : [
    *       {
    *           "id" : (string) Canvas API Identifier,
    *           "last_edited": (ISO 8601 string) the last edited time for the message,
    *           "name" : (string) Canvas name,
    *           "tags" : (array) tag names associated with the Canvas,
    *       },
    *     ... (more Canvases)
    *   ],
    *   "message": (required, string) the status of the export, returns 'success' when completed without errors
    * }
    *
    * ```
    *
    * > **Tip:** For help with CSV and API exports, visit [Export troubleshooting](https://desktop.postman.com/?desktopVersion=9.19.0&userId=16580579&teamId=409325).
    *
    * GET /canvas/list
    */
    public Map<?, ?> list() {
        return list(ListRequest.builder().build(), null);
    }


    /**
    * Export Canvas List
    *
    * > Use this endpoint to export a list of Canvases, including the name, Canvas API identifier and associated tags.
    *
    *
    * Canvases are returned in groups of 100 sorted by time of creation (oldest to newest by default).
    *
    * Archived Canvases will not be included in the API response unless the `include_archived` field is specified. Canvases that are stopped but not archived, however, will be returned by default.
    *
    * To use this endpoint, you’ll need to generate an API key with the `canvas.list` permission.
    *
    * ## Rate limit
    *
    * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
    *
    * ## Response
    *
    * ``` json
    * Content-Type: application/json
    * Authorization: Bearer YOUR-REST-API-KEY
    * {
    *   "canvases" : [
    *       {
    *           "id" : (string) Canvas API Identifier,
    *           "last_edited": (ISO 8601 string) the last edited time for the message,
    *           "name" : (string) Canvas name,
    *           "tags" : (array) tag names associated with the Canvas,
    *       },
    *     ... (more Canvases)
    *   ],
    *   "message": (required, string) the status of the export, returns 'success' when completed without errors
    * }
    *
    * ```
    *
    * > **Tip:** For help with CSV and API exports, visit [Export troubleshooting](https://desktop.postman.com/?desktopVersion=9.19.0&userId=16580579&teamId=409325).
    *
    * GET /canvas/list
    */
    public Map<?, ?> list(ListRequest request) {
        return list(request, null);
    }


    /**
    * Export Canvas List
    *
    * > Use this endpoint to export a list of Canvases, including the name, Canvas API identifier and associated tags.
    *
    *
    * Canvases are returned in groups of 100 sorted by time of creation (oldest to newest by default).
    *
    * Archived Canvases will not be included in the API response unless the `include_archived` field is specified. Canvases that are stopped but not archived, however, will be returned by default.
    *
    * To use this endpoint, you’ll need to generate an API key with the `canvas.list` permission.
    *
    * ## Rate limit
    *
    * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
    *
    * ## Response
    *
    * ``` json
    * Content-Type: application/json
    * Authorization: Bearer YOUR-REST-API-KEY
    * {
    *   "canvases" : [
    *       {
    *           "id" : (string) Canvas API Identifier,
    *           "last_edited": (ISO 8601 string) the last edited time for the message,
    *           "name" : (string) Canvas name,
    *           "tags" : (array) tag names associated with the Canvas,
    *       },
    *     ... (more Canvases)
    *   ],
    *   "message": (required, string) the status of the export, returns 'success' when completed without errors
    * }
    *
    * ```
    *
    * > **Tip:** For help with CSV and API exports, visit [Export troubleshooting](https://desktop.postman.com/?desktopVersion=9.19.0&userId=16580579&teamId=409325).
    *
    * GET /canvas/list
    */
    public Map<?, ?> list(ListRequest request, RequestOptions requestOptions) {

        try {
            okhttp3.Response response = new HttpRequestBuilder()
            .baseUrl(this.baseClient.baseUrl())
            .path("/canvas/list")
            .addQueryParam("include_archived", request.getIncludeArchived(), "form", true)
            .addQueryParam("last_edit.time[gt]", request.getLastEditTimeGt(), "form", true)
            .addQueryParam("page", request.getPage(), "form", true)
            .addQueryParam("sort_direction", request.getSortDirection(), "form", true)
            .method("GET")
            .addAuth(baseClient.getAuth("BearerAuth"))
            .execute();
            return ResponseHandler.processJsonResponse(response, new TypeReference<Map<?, ?>>() {});
        } catch (IOException e) {
            throw new ApiException("Error executing HTTP request", e);
        }
    }


}
