
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.resources.events.dataseries.params;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * ListRequest
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListRequest.Builder.class)
public final class ListRequest {
    /**
     * (Optional) String
     *
     * App API identifier retrieved from **Settings > Setup and Testing > API Keys** to limit analytics to a specific app.
     */
    private final Optional<String> appId;
    /**
     * (Optional) Datetime ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string)
     *
     * Date on which the data series should end. Defaults to time of the request.
     */
    private final Optional<String> endingAt;
    /**
     * (Required) String
     *
     * The name of the custom event for which to return analytics.
     */
    private final Optional<String> event;
    /**
     * (Required) Integer
     *
     * Maximum number of units (days or hours) before `ending_at` to include in the returned series. Must be between 1 and 100 (inclusive).
     */
    private final Optional<Integer> length;
    /**
     * (Optional) String
     *
     * See [Segment API identifier](https://www.braze.com/docs/api/identifier_types/). Segment ID indicating the analytics-enabled segment for which event analytics should be returned.
     */
    private final Optional<String> segmentId;
    /**
     * (Optional) String
     *
     * Unit of time between data points - can be `day` or `hour`, defaults to `day`.
     */
    private final Optional<String> unit;

    private ListRequest(
        Optional<String> appId,
        Optional<String> endingAt,
        Optional<String> event,
        Optional<Integer> length,
        Optional<String> segmentId,
        Optional<String> unit
    ) {
        this.appId = appId;
        this.endingAt = endingAt;
        this.event = event;
        this.length = length;
        this.segmentId = segmentId;
        this.unit = unit;
    }

    /**
     * Retrieves value for `appId`
     * (Optional) String
     *
     * App API identifier retrieved from **Settings > Setup and Testing > API Keys** to limit analytics to a specific app.
     */
    @JsonProperty("app_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getAppId() {
        return appId.orElse(null);
    }

    /**
     * Retrieves value for `endingAt`
     * (Optional) Datetime ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string)
     *
     * Date on which the data series should end. Defaults to time of the request.
     */
    @JsonProperty("ending_at")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getEndingAt() {
        return endingAt.orElse(null);
    }

    /**
     * Retrieves value for `event`
     * (Required) String
     *
     * The name of the custom event for which to return analytics.
     */
    @JsonProperty("event")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getEvent() {
        return event.orElse(null);
    }

    /**
     * Retrieves value for `length`
     * (Required) Integer
     *
     * Maximum number of units (days or hours) before `ending_at` to include in the returned series. Must be between 1 and 100 (inclusive).
     */
    @JsonProperty("length")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public Integer getLength() {
        return length.orElse(null);
    }

    /**
     * Retrieves value for `segmentId`
     * (Optional) String
     *
     * See [Segment API identifier](https://www.braze.com/docs/api/identifier_types/). Segment ID indicating the analytics-enabled segment for which event analytics should be returned.
     */
    @JsonProperty("segment_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getSegmentId() {
        return segmentId.orElse(null);
    }

    /**
     * Retrieves value for `unit`
     * (Optional) String
     *
     * Unit of time between data points - can be `day` or `hour`, defaults to `day`.
     */
    @JsonProperty("unit")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getUnit() {
        return unit.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof ListRequest && equalTo((ListRequest) other);
    }

    private boolean equalTo(ListRequest other) {
        return
            appId.equals(other.appId) &&

            endingAt.equals(other.endingAt) &&

            event.equals(other.event) &&

            length.equals(other.length) &&

            segmentId.equals(other.segmentId) &&

            unit.equals(other.unit)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.appId,
                   this.endingAt,
                   this.event,
                   this.length,
                   this.segmentId,
                   this.unit
               );
    }

    @Override
    public String toString() {
        return "ListRequest{" +
               "appId=" + appId +
               "endingAt=" + endingAt +
               "event=" + event +
               "length=" + length +
               "segmentId=" + segmentId +
               "unit=" + unit +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        /**
         * (Optional) String
         *
         * App API identifier retrieved from **Settings > Setup and Testing > API Keys** to limit analytics to a specific app.
         */
        private Optional<String> appId = Optional.empty();
        /**
         * (Optional) Datetime ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string)
         *
         * Date on which the data series should end. Defaults to time of the request.
         */
        private Optional<String> endingAt = Optional.empty();
        /**
         * (Required) String
         *
         * The name of the custom event for which to return analytics.
         */
        private Optional<String> event = Optional.empty();
        /**
         * (Required) Integer
         *
         * Maximum number of units (days or hours) before `ending_at` to include in the returned series. Must be between 1 and 100 (inclusive).
         */
        private Optional<Integer> length = Optional.empty();
        /**
         * (Optional) String
         *
         * See [Segment API identifier](https://www.braze.com/docs/api/identifier_types/). Segment ID indicating the analytics-enabled segment for which event analytics should be returned.
         */
        private Optional<String> segmentId = Optional.empty();
        /**
         * (Optional) String
         *
         * Unit of time between data points - can be `day` or `hour`, defaults to `day`.
         */
        private Optional<String> unit = Optional.empty();

        private Builder() {}

        public Builder from(ListRequest other) {
            appId(other.getAppId());
            endingAt(other.getEndingAt());
            event(other.getEvent());
            length(other.getLength());
            segmentId(other.getSegmentId());
            unit(other.getUnit());
            return this;
        }

        /**
         * Sets value for `appId`
         * (Optional) String
         *
         * App API identifier retrieved from **Settings > Setup and Testing > API Keys** to limit analytics to a specific app.
         */
        @JsonSetter("app_id")
        public Builder appId(String appId) {
            this.appId = Optional.ofNullable(appId);

            return this;
        }

        public Builder appId(Optional<String> appId) {
            this.appId = appId;
            return this;
        }

        /**
         * Sets value for `endingAt`
         * (Optional) Datetime ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string)
         *
         * Date on which the data series should end. Defaults to time of the request.
         */
        @JsonSetter("ending_at")
        public Builder endingAt(String endingAt) {
            this.endingAt = Optional.ofNullable(endingAt);

            return this;
        }

        public Builder endingAt(Optional<String> endingAt) {
            this.endingAt = endingAt;
            return this;
        }

        /**
         * Sets value for `event`
         * (Required) String
         *
         * The name of the custom event for which to return analytics.
         */
        @JsonSetter("event")
        public Builder event(String event) {
            this.event = Optional.ofNullable(event);

            return this;
        }

        public Builder event(Optional<String> event) {
            this.event = event;
            return this;
        }

        /**
         * Sets value for `length`
         * (Required) Integer
         *
         * Maximum number of units (days or hours) before `ending_at` to include in the returned series. Must be between 1 and 100 (inclusive).
         */
        @JsonSetter("length")
        public Builder length(Integer length) {
            this.length = Optional.ofNullable(length);

            return this;
        }

        public Builder length(Optional<Integer> length) {
            this.length = length;
            return this;
        }

        /**
         * Sets value for `segmentId`
         * (Optional) String
         *
         * See [Segment API identifier](https://www.braze.com/docs/api/identifier_types/). Segment ID indicating the analytics-enabled segment for which event analytics should be returned.
         */
        @JsonSetter("segment_id")
        public Builder segmentId(String segmentId) {
            this.segmentId = Optional.ofNullable(segmentId);

            return this;
        }

        public Builder segmentId(Optional<String> segmentId) {
            this.segmentId = segmentId;
            return this;
        }

        /**
         * Sets value for `unit`
         * (Optional) String
         *
         * Unit of time between data points - can be `day` or `hour`, defaults to `day`.
         */
        @JsonSetter("unit")
        public Builder unit(String unit) {
            this.unit = Optional.ofNullable(unit);

            return this;
        }

        public Builder unit(Optional<String> unit) {
            this.unit = unit;
            return this;
        }


        public ListRequest build() {
            return new ListRequest(
                       appId,
                       endingAt,
                       event,
                       length,
                       segmentId,
                       unit
                   );
        }
    }

}



