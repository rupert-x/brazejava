
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.resources.events.list;

import java.io.IOException;
import java.util.Map;

import com.fasterxml.jackson.core.type.TypeReference;
import com.yourorg.brazejava.core.ApiException;
import com.yourorg.brazejava.core.BaseClient;
import com.yourorg.brazejava.core.HttpRequestBuilder;
import com.yourorg.brazejava.core.RequestOptions;
import com.yourorg.brazejava.core.ResponseHandler;
import com.yourorg.brazejava.resources.events.list.params.ListRequest;


public class ListClient {
    protected final BaseClient baseClient;

    public ListClient(BaseClient baseClient) {
        this.baseClient = baseClient;

    }

    /**
    * Export Custom Events List
    *
    * > Use this endpoint to export a list of custom events that have been recorded for your app. The event names are returned in groups of 250, sorted alphabetically.
    *
    *
    * To use this endpoint, you’ll need to generate an API key with the `events.list` permission.
    *
    * ## Rate limit
    *
    * For customers who onboarded with Braze on or after September 16, 2021, we apply a shared rate limit of 1,000 requests per hour to this endpoint. This rate limit is shared with the `/purchases/product_list` endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
    *
    * ## Response
    *
    * ``` json
    * Content-Type: application/json
    * Authorization: Bearer YOUR-REST-API-KEY
    * {
    *     "message": (required, string) the status of the export, returns 'success' when completed without errors,
    *     "events" : [
    *         "Event A", (string) the event name,
    *         "Event B", (string) the event name,
    *         "Event C", (string) the event name,
    *         ...
    *     ]
    * }
    *
    * ```
    *
    * ### Fatal error response codes
    *
    * For status codes and associated error messages that will be returned if your request encounters a fatal error, reference [Fatal errors & responses](https://www.braze.com/docs/api/errors/#fatal-errors).
    *
    * > **Tip:** For help with CSV and API exports, visit [Export troubleshooting](https://www.braze.com/docs/user_guide/data_and_analytics/export_braze_data/export_troubleshooting/).
    *
    * GET /events/list
    */
    public Map<?, ?> list() {
        return list(ListRequest.builder().build(), null);
    }


    /**
    * Export Custom Events List
    *
    * > Use this endpoint to export a list of custom events that have been recorded for your app. The event names are returned in groups of 250, sorted alphabetically.
    *
    *
    * To use this endpoint, you’ll need to generate an API key with the `events.list` permission.
    *
    * ## Rate limit
    *
    * For customers who onboarded with Braze on or after September 16, 2021, we apply a shared rate limit of 1,000 requests per hour to this endpoint. This rate limit is shared with the `/purchases/product_list` endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
    *
    * ## Response
    *
    * ``` json
    * Content-Type: application/json
    * Authorization: Bearer YOUR-REST-API-KEY
    * {
    *     "message": (required, string) the status of the export, returns 'success' when completed without errors,
    *     "events" : [
    *         "Event A", (string) the event name,
    *         "Event B", (string) the event name,
    *         "Event C", (string) the event name,
    *         ...
    *     ]
    * }
    *
    * ```
    *
    * ### Fatal error response codes
    *
    * For status codes and associated error messages that will be returned if your request encounters a fatal error, reference [Fatal errors & responses](https://www.braze.com/docs/api/errors/#fatal-errors).
    *
    * > **Tip:** For help with CSV and API exports, visit [Export troubleshooting](https://www.braze.com/docs/user_guide/data_and_analytics/export_braze_data/export_troubleshooting/).
    *
    * GET /events/list
    */
    public Map<?, ?> list(ListRequest request) {
        return list(request, null);
    }


    /**
    * Export Custom Events List
    *
    * > Use this endpoint to export a list of custom events that have been recorded for your app. The event names are returned in groups of 250, sorted alphabetically.
    *
    *
    * To use this endpoint, you’ll need to generate an API key with the `events.list` permission.
    *
    * ## Rate limit
    *
    * For customers who onboarded with Braze on or after September 16, 2021, we apply a shared rate limit of 1,000 requests per hour to this endpoint. This rate limit is shared with the `/purchases/product_list` endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
    *
    * ## Response
    *
    * ``` json
    * Content-Type: application/json
    * Authorization: Bearer YOUR-REST-API-KEY
    * {
    *     "message": (required, string) the status of the export, returns 'success' when completed without errors,
    *     "events" : [
    *         "Event A", (string) the event name,
    *         "Event B", (string) the event name,
    *         "Event C", (string) the event name,
    *         ...
    *     ]
    * }
    *
    * ```
    *
    * ### Fatal error response codes
    *
    * For status codes and associated error messages that will be returned if your request encounters a fatal error, reference [Fatal errors & responses](https://www.braze.com/docs/api/errors/#fatal-errors).
    *
    * > **Tip:** For help with CSV and API exports, visit [Export troubleshooting](https://www.braze.com/docs/user_guide/data_and_analytics/export_braze_data/export_troubleshooting/).
    *
    * GET /events/list
    */
    public Map<?, ?> list(ListRequest request, RequestOptions requestOptions) {

        try {
            okhttp3.Response response = new HttpRequestBuilder()
            .baseUrl(this.baseClient.baseUrl())
            .path("/events/list")
            .addQueryParam("page", request.getPage(), "form", true)
            .method("GET")
            .addAuth(baseClient.getAuth("BearerAuth"))
            .execute();
            return ResponseHandler.processJsonResponse(response, new TypeReference<Map<?, ?>>() {});
        } catch (IOException e) {
            throw new ApiException("Error executing HTTP request", e);
        }
    }


}
