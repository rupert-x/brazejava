
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.resources.events.list.params;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * ListRequest
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListRequest.Builder.class)
public final class ListRequest {
    /**
     * (Optional) Integer
     *
     * The page of event names to return, defaults to 0 (returns the first set of up to 250).
     */
    private final Optional<Integer> page;

    private ListRequest(
        Optional<Integer> page
    ) {
        this.page = page;
    }

    /**
     * Retrieves value for `page`
     * (Optional) Integer
     *
     * The page of event names to return, defaults to 0 (returns the first set of up to 250).
     */
    @JsonProperty("page")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public Integer getPage() {
        return page.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof ListRequest && equalTo((ListRequest) other);
    }

    private boolean equalTo(ListRequest other) {
        return
            page.equals(other.page)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.page
               );
    }

    @Override
    public String toString() {
        return "ListRequest{" +
               "page=" + page +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        /**
         * (Optional) Integer
         *
         * The page of event names to return, defaults to 0 (returns the first set of up to 250).
         */
        private Optional<Integer> page = Optional.empty();

        private Builder() {}

        public Builder from(ListRequest other) {
            page(other.getPage());
            return this;
        }

        /**
         * Sets value for `page`
         * (Optional) Integer
         *
         * The page of event names to return, defaults to 0 (returns the first set of up to 250).
         */
        @JsonSetter("page")
        public Builder page(Integer page) {
            this.page = Optional.ofNullable(page);

            return this;
        }

        public Builder page(Optional<Integer> page) {
            this.page = page;
            return this;
        }


        public ListRequest build() {
            return new ListRequest(
                       page
                   );
        }
    }

}



