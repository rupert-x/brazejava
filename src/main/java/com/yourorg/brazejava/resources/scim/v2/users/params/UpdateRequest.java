
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.resources.scim.v2.users.params;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.yourorg.brazejava.model.ScimV2UsersUpdateBody;


/**
 * UpdateRequest
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateRequest.Builder.class)
public final class UpdateRequest {
    private final Optional<ScimV2UsersUpdateBody> data;
    private final String id;

    private UpdateRequest(
        Optional<ScimV2UsersUpdateBody> data,
        String id
    ) {
        this.data = data;
        this.id = id;
    }

    /**
     * Retrieves value for `data`
     */
    @JsonProperty("data")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public ScimV2UsersUpdateBody getData() {
        return data.orElse(null);
    }

    /**
     * Retrieves value for `id`
     */
    @JsonProperty("id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getId() {
        return id;
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof UpdateRequest && equalTo((UpdateRequest) other);
    }

    private boolean equalTo(UpdateRequest other) {
        return
            data.equals(other.data) &&

            id.equals(other.id)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.data,
                   this.id
               );
    }

    @Override
    public String toString() {
        return "UpdateRequest{" +
               "data=" + data +
               "id=" + id +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<ScimV2UsersUpdateBody> data = Optional.empty();
        private String id = null;

        private Builder() {}

        public Builder from(UpdateRequest other) {
            data(other.getData());
            id(other.getId());
            return this;
        }

        /**
         * Sets value for `data`
         */
        @JsonSetter("data")
        public Builder data(ScimV2UsersUpdateBody data) {
            this.data = Optional.ofNullable(data);

            return this;
        }

        public Builder data(Optional<ScimV2UsersUpdateBody> data) {
            this.data = data;
            return this;
        }

        /**
         * Sets value for `id`
         */
        @JsonSetter("id")
        public Builder id(String id) {
            if (id == null) {
                throw new IllegalArgumentException("id cannot be null");
            }

            this.id = id;

            return this;
        }



        public UpdateRequest build() {
            if (id == null) {
                throw new IllegalStateException("id is required");
            }

            return new UpdateRequest(
                       data,
                       id
                   );
        }
    }

}



