
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.resources.users.externalids.remove;

import java.io.IOException;
import java.util.Map;

import com.fasterxml.jackson.core.type.TypeReference;
import com.yourorg.brazejava.core.ApiException;
import com.yourorg.brazejava.core.BaseClient;
import com.yourorg.brazejava.core.HttpRequestBuilder;
import com.yourorg.brazejava.core.RequestOptions;
import com.yourorg.brazejava.core.ResponseHandler;
import com.yourorg.brazejava.resources.users.externalids.remove.params.CreateRequest;


public class RemoveClient {
    protected final BaseClient baseClient;

    public RemoveClient(BaseClient baseClient) {
        this.baseClient = baseClient;

    }

    /**
    * Remove External ID
    *
    * > Use this endpoint to remove your users' old deprecated external IDs.
    *
    *
    * To use this endpoint, you’ll need to generate an API key with the `users.external_ids.remove` permission.
    *
    * You can send up to 50 external IDs per request. You will need to create a new [API key](https://www.braze.com/docs/api/api_key/) with permissions for this endpoint.
    *
    * > **Warning:** This endpoint completely removes the deprecated ID and cannot be undone. Using this endpoint to remove deprecated \`external_ids\` that are still associated with users in your system can permanently prevent you from finding those users' data.
    *
    *
    * ## Rate limit
    *
    * We apply a rate limit of 1,000 requests per minute to this endpoint, as documented in [API rate limits](http://braze.com/docs/api/api_limits/).
    *
    * ### Request parameters
    *
    * | Parameter | Required | Data Type | Description |
    * | --- | --- | --- | --- |
    * | `external_ids` | Required | Array of strings | External identifiers for the users to remove |
    *
    * > Important: Only deprecated IDs can be removed; attempting to remove a primary external ID will result in an error.
    *
    *
    * ## Response
    *
    * The response will confirm all successful removals, as well as unsuccessful removals with the associated errors. Error messages in the `removal_errors` field will reference the index in the array of the original request.
    *
    * ``` json
    * {
    *   "message" : (string) status message,
    *   "removed_ids" : (array of successful Remove Operations),
    *   "removal_errors": (array of any )
    * }
    *
    * ```
    *
    * The `message` field will return `success` for any valid request. More specific errors are captured in the `removal_errors` array. The `message` field returns an error in the case of:
    *
    * - Invalid API key
    * - Empty `external_ids` array
    * - `external_ids` array with more than 50 items
    * - Rate limit hit (>1,000 requests/minute)
    *
    * POST /users/external_ids/remove
    */
    public Map<?, ?> create(CreateRequest request) {
        return create(request, null);
    }


    /**
    * Remove External ID
    *
    * > Use this endpoint to remove your users' old deprecated external IDs.
    *
    *
    * To use this endpoint, you’ll need to generate an API key with the `users.external_ids.remove` permission.
    *
    * You can send up to 50 external IDs per request. You will need to create a new [API key](https://www.braze.com/docs/api/api_key/) with permissions for this endpoint.
    *
    * > **Warning:** This endpoint completely removes the deprecated ID and cannot be undone. Using this endpoint to remove deprecated \`external_ids\` that are still associated with users in your system can permanently prevent you from finding those users' data.
    *
    *
    * ## Rate limit
    *
    * We apply a rate limit of 1,000 requests per minute to this endpoint, as documented in [API rate limits](http://braze.com/docs/api/api_limits/).
    *
    * ### Request parameters
    *
    * | Parameter | Required | Data Type | Description |
    * | --- | --- | --- | --- |
    * | `external_ids` | Required | Array of strings | External identifiers for the users to remove |
    *
    * > Important: Only deprecated IDs can be removed; attempting to remove a primary external ID will result in an error.
    *
    *
    * ## Response
    *
    * The response will confirm all successful removals, as well as unsuccessful removals with the associated errors. Error messages in the `removal_errors` field will reference the index in the array of the original request.
    *
    * ``` json
    * {
    *   "message" : (string) status message,
    *   "removed_ids" : (array of successful Remove Operations),
    *   "removal_errors": (array of any )
    * }
    *
    * ```
    *
    * The `message` field will return `success` for any valid request. More specific errors are captured in the `removal_errors` array. The `message` field returns an error in the case of:
    *
    * - Invalid API key
    * - Empty `external_ids` array
    * - `external_ids` array with more than 50 items
    * - Rate limit hit (>1,000 requests/minute)
    *
    * POST /users/external_ids/remove
    */
    public Map<?, ?> create(CreateRequest request, RequestOptions requestOptions) {

        try {
            okhttp3.Response response = new HttpRequestBuilder()
            .baseUrl(this.baseClient.baseUrl())
            .path("/users/external_ids/remove")
            .method("POST")
            .addAuth(baseClient.getAuth("BearerAuth"))
            .setJsonBody(request.getData())
            .execute();
            return ResponseHandler.processJsonResponse(response, new TypeReference<Map<?, ?>>() {});
        } catch (IOException e) {
            throw new ApiException("Error executing HTTP request", e);
        }
    }


}
