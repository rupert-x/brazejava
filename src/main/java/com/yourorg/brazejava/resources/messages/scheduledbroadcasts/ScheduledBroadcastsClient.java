
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.resources.messages.scheduledbroadcasts;

import java.io.IOException;
import java.util.Map;

import com.fasterxml.jackson.core.type.TypeReference;
import com.yourorg.brazejava.core.ApiException;
import com.yourorg.brazejava.core.BaseClient;
import com.yourorg.brazejava.core.HttpRequestBuilder;
import com.yourorg.brazejava.core.RequestOptions;
import com.yourorg.brazejava.core.ResponseHandler;
import com.yourorg.brazejava.resources.messages.scheduledbroadcasts.params.ListRequest;


public class ScheduledBroadcastsClient {
    protected final BaseClient baseClient;

    public ScheduledBroadcastsClient(BaseClient baseClient) {
        this.baseClient = baseClient;

    }

    /**
    * List Upcoming Scheduled Campaigns and Canvases
    *
    * > Use this endpoint to return a JSON list of information about scheduled campaigns and entry Canvases between now and a designated `end_time` specified in the request.
    *
    *
    * To use this endpoint, you’ll need to generate an API key with the `messages.schedule_broadcasts` permission.
    *
    * Daily, recurring messages will only appear once with their next occurrence. Results returned in this endpoint are only for campaigns and Canvases created and scheduled in Braze.
    *
    * ### Rate limit
    *
    * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
    *
    * ## Response
    *
    * ``` json
    * Content-Type: application/json
    * Authorization: Bearer YOUR-REST-API-KEY
    * {
    *   "scheduled_broadcasts": [
    *     {
    *       "name" (string) the name of the scheduled boradcast,
    *       "id" (stings) the Canvas or campaign identifier,
    *       "type" (string) the broadcast type either Canvas or Campaign,
    *       "tags" (array) an array of tag names formatted as strings,
    *       "next_send_time" (string) The next send time formatted in ISO 8601, may also include time zone if not local/intelligent delivery,
    *       "schedule_type" (string) The schedule type, either local_time_zones, intelligent_delivery or the name of your company's time zone,
    *     },
    *   ]
    * }
    *
    * ```
    *
    * GET /messages/scheduled_broadcasts
    */
    public Map<?, ?> list() {
        return list(ListRequest.builder().build(), null);
    }


    /**
    * List Upcoming Scheduled Campaigns and Canvases
    *
    * > Use this endpoint to return a JSON list of information about scheduled campaigns and entry Canvases between now and a designated `end_time` specified in the request.
    *
    *
    * To use this endpoint, you’ll need to generate an API key with the `messages.schedule_broadcasts` permission.
    *
    * Daily, recurring messages will only appear once with their next occurrence. Results returned in this endpoint are only for campaigns and Canvases created and scheduled in Braze.
    *
    * ### Rate limit
    *
    * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
    *
    * ## Response
    *
    * ``` json
    * Content-Type: application/json
    * Authorization: Bearer YOUR-REST-API-KEY
    * {
    *   "scheduled_broadcasts": [
    *     {
    *       "name" (string) the name of the scheduled boradcast,
    *       "id" (stings) the Canvas or campaign identifier,
    *       "type" (string) the broadcast type either Canvas or Campaign,
    *       "tags" (array) an array of tag names formatted as strings,
    *       "next_send_time" (string) The next send time formatted in ISO 8601, may also include time zone if not local/intelligent delivery,
    *       "schedule_type" (string) The schedule type, either local_time_zones, intelligent_delivery or the name of your company's time zone,
    *     },
    *   ]
    * }
    *
    * ```
    *
    * GET /messages/scheduled_broadcasts
    */
    public Map<?, ?> list(ListRequest request) {
        return list(request, null);
    }


    /**
    * List Upcoming Scheduled Campaigns and Canvases
    *
    * > Use this endpoint to return a JSON list of information about scheduled campaigns and entry Canvases between now and a designated `end_time` specified in the request.
    *
    *
    * To use this endpoint, you’ll need to generate an API key with the `messages.schedule_broadcasts` permission.
    *
    * Daily, recurring messages will only appear once with their next occurrence. Results returned in this endpoint are only for campaigns and Canvases created and scheduled in Braze.
    *
    * ### Rate limit
    *
    * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
    *
    * ## Response
    *
    * ``` json
    * Content-Type: application/json
    * Authorization: Bearer YOUR-REST-API-KEY
    * {
    *   "scheduled_broadcasts": [
    *     {
    *       "name" (string) the name of the scheduled boradcast,
    *       "id" (stings) the Canvas or campaign identifier,
    *       "type" (string) the broadcast type either Canvas or Campaign,
    *       "tags" (array) an array of tag names formatted as strings,
    *       "next_send_time" (string) The next send time formatted in ISO 8601, may also include time zone if not local/intelligent delivery,
    *       "schedule_type" (string) The schedule type, either local_time_zones, intelligent_delivery or the name of your company's time zone,
    *     },
    *   ]
    * }
    *
    * ```
    *
    * GET /messages/scheduled_broadcasts
    */
    public Map<?, ?> list(ListRequest request, RequestOptions requestOptions) {

        try {
            okhttp3.Response response = new HttpRequestBuilder()
            .baseUrl(this.baseClient.baseUrl())
            .path("/messages/scheduled_broadcasts")
            .addQueryParam("end_time", request.getEndTime(), "form", true)
            .method("GET")
            .addAuth(baseClient.getAuth("BearerAuth"))
            .execute();
            return ResponseHandler.processJsonResponse(response, new TypeReference<Map<?, ?>>() {});
        } catch (IOException e) {
            throw new ApiException("Error executing HTTP request", e);
        }
    }


}
