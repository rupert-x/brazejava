
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.resources.transactional.v1.campaigns.send.params;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.yourorg.brazejava.model.TransactionalV1CampaignsSendCreateBody;


/**
 * CreateRequest
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateRequest.Builder.class)
public final class CreateRequest {
    private final Optional<TransactionalV1CampaignsSendCreateBody> data;
    private final String campaignId;

    private CreateRequest(
        Optional<TransactionalV1CampaignsSendCreateBody> data,
        String campaignId
    ) {
        this.data = data;
        this.campaignId = campaignId;
    }

    /**
     * Retrieves value for `data`
     */
    @JsonProperty("data")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public TransactionalV1CampaignsSendCreateBody getData() {
        return data.orElse(null);
    }

    /**
     * Retrieves value for `campaignId`
     */
    @JsonProperty("campaign_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getCampaignId() {
        return campaignId;
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof CreateRequest && equalTo((CreateRequest) other);
    }

    private boolean equalTo(CreateRequest other) {
        return
            data.equals(other.data) &&

            campaignId.equals(other.campaignId)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.data,
                   this.campaignId
               );
    }

    @Override
    public String toString() {
        return "CreateRequest{" +
               "data=" + data +
               "campaignId=" + campaignId +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TransactionalV1CampaignsSendCreateBody> data = Optional.empty();
        private String campaignId = null;

        private Builder() {}

        public Builder from(CreateRequest other) {
            data(other.getData());
            campaignId(other.getCampaignId());
            return this;
        }

        /**
         * Sets value for `data`
         */
        @JsonSetter("data")
        public Builder data(TransactionalV1CampaignsSendCreateBody data) {
            this.data = Optional.ofNullable(data);

            return this;
        }

        public Builder data(Optional<TransactionalV1CampaignsSendCreateBody> data) {
            this.data = data;
            return this;
        }

        /**
         * Sets value for `campaignId`
         */
        @JsonSetter("campaign_id")
        public Builder campaignId(String campaignId) {
            if (campaignId == null) {
                throw new IllegalArgumentException("campaignId cannot be null");
            }

            this.campaignId = campaignId;

            return this;
        }



        public CreateRequest build() {
            if (campaignId == null) {
                throw new IllegalStateException("campaignId is required");
            }

            return new CreateRequest(
                       data,
                       campaignId
                   );
        }
    }

}



