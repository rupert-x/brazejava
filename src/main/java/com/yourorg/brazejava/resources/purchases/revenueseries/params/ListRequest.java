
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.resources.purchases.revenueseries.params;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * ListRequest
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListRequest.Builder.class)
public final class ListRequest {
    /**
     * (Optional) String
     * App API identifier retrieved from the Settings > Setup and Testing > API Keys to limit analytics to a specific app.
     */
    private final Optional<String> appId;
    /**
     * (Optional) Datetime (ISO 8601 string)
     * Date on which the data series should end. Defaults to time of the request.
     */
    private final Optional<String> endingAt;
    /**
     * (Required) Integer
     * Maximum number of days before ending_at to include in the returned series. Must be between 1 and 100 (inclusive).
     */
    private final Optional<Integer> length;
    /**
     * (Optional) String
     * Name of product to filter response by. If excluded, results for all apps will be returned.
     */
    private final Optional<String> product;
    /**
     * (Optional) String
     * Unit of time between data points. Can be `day` or `hour`, defaults to `day`.
     */
    private final Optional<Integer> unit;

    private ListRequest(
        Optional<String> appId,
        Optional<String> endingAt,
        Optional<Integer> length,
        Optional<String> product,
        Optional<Integer> unit
    ) {
        this.appId = appId;
        this.endingAt = endingAt;
        this.length = length;
        this.product = product;
        this.unit = unit;
    }

    /**
     * Retrieves value for `appId`
     * (Optional) String
     * App API identifier retrieved from the Settings > Setup and Testing > API Keys to limit analytics to a specific app.
     */
    @JsonProperty("app_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getAppId() {
        return appId.orElse(null);
    }

    /**
     * Retrieves value for `endingAt`
     * (Optional) Datetime (ISO 8601 string)
     * Date on which the data series should end. Defaults to time of the request.
     */
    @JsonProperty("ending_at")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getEndingAt() {
        return endingAt.orElse(null);
    }

    /**
     * Retrieves value for `length`
     * (Required) Integer
     * Maximum number of days before ending_at to include in the returned series. Must be between 1 and 100 (inclusive).
     */
    @JsonProperty("length")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public Integer getLength() {
        return length.orElse(null);
    }

    /**
     * Retrieves value for `product`
     * (Optional) String
     * Name of product to filter response by. If excluded, results for all apps will be returned.
     */
    @JsonProperty("product")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getProduct() {
        return product.orElse(null);
    }

    /**
     * Retrieves value for `unit`
     * (Optional) String
     * Unit of time between data points. Can be `day` or `hour`, defaults to `day`.
     */
    @JsonProperty("unit")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public Integer getUnit() {
        return unit.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof ListRequest && equalTo((ListRequest) other);
    }

    private boolean equalTo(ListRequest other) {
        return
            appId.equals(other.appId) &&

            endingAt.equals(other.endingAt) &&

            length.equals(other.length) &&

            product.equals(other.product) &&

            unit.equals(other.unit)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.appId,
                   this.endingAt,
                   this.length,
                   this.product,
                   this.unit
               );
    }

    @Override
    public String toString() {
        return "ListRequest{" +
               "appId=" + appId +
               "endingAt=" + endingAt +
               "length=" + length +
               "product=" + product +
               "unit=" + unit +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        /**
         * (Optional) String
         * App API identifier retrieved from the Settings > Setup and Testing > API Keys to limit analytics to a specific app.
         */
        private Optional<String> appId = Optional.empty();
        /**
         * (Optional) Datetime (ISO 8601 string)
         * Date on which the data series should end. Defaults to time of the request.
         */
        private Optional<String> endingAt = Optional.empty();
        /**
         * (Required) Integer
         * Maximum number of days before ending_at to include in the returned series. Must be between 1 and 100 (inclusive).
         */
        private Optional<Integer> length = Optional.empty();
        /**
         * (Optional) String
         * Name of product to filter response by. If excluded, results for all apps will be returned.
         */
        private Optional<String> product = Optional.empty();
        /**
         * (Optional) String
         * Unit of time between data points. Can be `day` or `hour`, defaults to `day`.
         */
        private Optional<Integer> unit = Optional.empty();

        private Builder() {}

        public Builder from(ListRequest other) {
            appId(other.getAppId());
            endingAt(other.getEndingAt());
            length(other.getLength());
            product(other.getProduct());
            unit(other.getUnit());
            return this;
        }

        /**
         * Sets value for `appId`
         * (Optional) String
         * App API identifier retrieved from the Settings > Setup and Testing > API Keys to limit analytics to a specific app.
         */
        @JsonSetter("app_id")
        public Builder appId(String appId) {
            this.appId = Optional.ofNullable(appId);

            return this;
        }

        public Builder appId(Optional<String> appId) {
            this.appId = appId;
            return this;
        }

        /**
         * Sets value for `endingAt`
         * (Optional) Datetime (ISO 8601 string)
         * Date on which the data series should end. Defaults to time of the request.
         */
        @JsonSetter("ending_at")
        public Builder endingAt(String endingAt) {
            this.endingAt = Optional.ofNullable(endingAt);

            return this;
        }

        public Builder endingAt(Optional<String> endingAt) {
            this.endingAt = endingAt;
            return this;
        }

        /**
         * Sets value for `length`
         * (Required) Integer
         * Maximum number of days before ending_at to include in the returned series. Must be between 1 and 100 (inclusive).
         */
        @JsonSetter("length")
        public Builder length(Integer length) {
            this.length = Optional.ofNullable(length);

            return this;
        }

        public Builder length(Optional<Integer> length) {
            this.length = length;
            return this;
        }

        /**
         * Sets value for `product`
         * (Optional) String
         * Name of product to filter response by. If excluded, results for all apps will be returned.
         */
        @JsonSetter("product")
        public Builder product(String product) {
            this.product = Optional.ofNullable(product);

            return this;
        }

        public Builder product(Optional<String> product) {
            this.product = product;
            return this;
        }

        /**
         * Sets value for `unit`
         * (Optional) String
         * Unit of time between data points. Can be `day` or `hour`, defaults to `day`.
         */
        @JsonSetter("unit")
        public Builder unit(Integer unit) {
            this.unit = Optional.ofNullable(unit);

            return this;
        }

        public Builder unit(Optional<Integer> unit) {
            this.unit = unit;
            return this;
        }


        public ListRequest build() {
            return new ListRequest(
                       appId,
                       endingAt,
                       length,
                       product,
                       unit
                   );
        }
    }

}



