
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.resources.campaigns.list.params;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * ListRequest
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListRequest.Builder.class)
public final class ListRequest {
    /**
     * (Optional) Boolean
     *
     * Whether or not to include archived campaigns, defaults to false.
     */
    private final Optional<Boolean> includeArchived;
    /**
     * (Optional) Datetime ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string)
     *
     * Filters the results and only returns campaigns that were edited greater than the time provided till now. Format is `yyyy-MM-DDTHH:mm:ss`.
     */
    private final Optional<String> lastEditTimeGt;
    /**
     * (Optional) Integer
     *
     * The page of campaigns to return, defaults to 0 (returns the first set of up to 100).
     */
    private final Optional<Integer> page;
    /**
     * (Optional) String
     *
     * - Sort creation time from newest to oldest: pass in the value `desc`.
     * - Sort creation time from oldest to newest: pass in the value `asc`.
     *
     * If `sort_direction` is not included, the default order is oldest to newest.
     */
    private final Optional<String> sortDirection;

    private ListRequest(
        Optional<Boolean> includeArchived,
        Optional<String> lastEditTimeGt,
        Optional<Integer> page,
        Optional<String> sortDirection
    ) {
        this.includeArchived = includeArchived;
        this.lastEditTimeGt = lastEditTimeGt;
        this.page = page;
        this.sortDirection = sortDirection;
    }

    /**
     * Retrieves value for `includeArchived`
     * (Optional) Boolean
     *
     * Whether or not to include archived campaigns, defaults to false.
     */
    @JsonProperty("include_archived")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public Boolean getIncludeArchived() {
        return includeArchived.orElse(null);
    }

    /**
     * Retrieves value for `lastEditTimeGt`
     * (Optional) Datetime ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string)
     *
     * Filters the results and only returns campaigns that were edited greater than the time provided till now. Format is `yyyy-MM-DDTHH:mm:ss`.
     */
    @JsonProperty("last_edit.time[gt]")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getLastEditTimeGt() {
        return lastEditTimeGt.orElse(null);
    }

    /**
     * Retrieves value for `page`
     * (Optional) Integer
     *
     * The page of campaigns to return, defaults to 0 (returns the first set of up to 100).
     */
    @JsonProperty("page")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public Integer getPage() {
        return page.orElse(null);
    }

    /**
     * Retrieves value for `sortDirection`
     * (Optional) String
     *
     * - Sort creation time from newest to oldest: pass in the value `desc`.
     * - Sort creation time from oldest to newest: pass in the value `asc`.
     *
     * If `sort_direction` is not included, the default order is oldest to newest.
     */
    @JsonProperty("sort_direction")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getSortDirection() {
        return sortDirection.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof ListRequest && equalTo((ListRequest) other);
    }

    private boolean equalTo(ListRequest other) {
        return
            includeArchived.equals(other.includeArchived) &&

            lastEditTimeGt.equals(other.lastEditTimeGt) &&

            page.equals(other.page) &&

            sortDirection.equals(other.sortDirection)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.includeArchived,
                   this.lastEditTimeGt,
                   this.page,
                   this.sortDirection
               );
    }

    @Override
    public String toString() {
        return "ListRequest{" +
               "includeArchived=" + includeArchived +
               "lastEditTimeGt=" + lastEditTimeGt +
               "page=" + page +
               "sortDirection=" + sortDirection +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        /**
         * (Optional) Boolean
         *
         * Whether or not to include archived campaigns, defaults to false.
         */
        private Optional<Boolean> includeArchived = Optional.empty();
        /**
         * (Optional) Datetime ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string)
         *
         * Filters the results and only returns campaigns that were edited greater than the time provided till now. Format is `yyyy-MM-DDTHH:mm:ss`.
         */
        private Optional<String> lastEditTimeGt = Optional.empty();
        /**
         * (Optional) Integer
         *
         * The page of campaigns to return, defaults to 0 (returns the first set of up to 100).
         */
        private Optional<Integer> page = Optional.empty();
        /**
         * (Optional) String
         *
         * - Sort creation time from newest to oldest: pass in the value `desc`.
         * - Sort creation time from oldest to newest: pass in the value `asc`.
         *
         * If `sort_direction` is not included, the default order is oldest to newest.
         */
        private Optional<String> sortDirection = Optional.empty();

        private Builder() {}

        public Builder from(ListRequest other) {
            includeArchived(other.getIncludeArchived());
            lastEditTimeGt(other.getLastEditTimeGt());
            page(other.getPage());
            sortDirection(other.getSortDirection());
            return this;
        }

        /**
         * Sets value for `includeArchived`
         * (Optional) Boolean
         *
         * Whether or not to include archived campaigns, defaults to false.
         */
        @JsonSetter("include_archived")
        public Builder includeArchived(Boolean includeArchived) {
            this.includeArchived = Optional.ofNullable(includeArchived);

            return this;
        }

        public Builder includeArchived(Optional<Boolean> includeArchived) {
            this.includeArchived = includeArchived;
            return this;
        }

        /**
         * Sets value for `lastEditTimeGt`
         * (Optional) Datetime ([ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string)
         *
         * Filters the results and only returns campaigns that were edited greater than the time provided till now. Format is `yyyy-MM-DDTHH:mm:ss`.
         */
        @JsonSetter("last_edit.time[gt]")
        public Builder lastEditTimeGt(String lastEditTimeGt) {
            this.lastEditTimeGt = Optional.ofNullable(lastEditTimeGt);

            return this;
        }

        public Builder lastEditTimeGt(Optional<String> lastEditTimeGt) {
            this.lastEditTimeGt = lastEditTimeGt;
            return this;
        }

        /**
         * Sets value for `page`
         * (Optional) Integer
         *
         * The page of campaigns to return, defaults to 0 (returns the first set of up to 100).
         */
        @JsonSetter("page")
        public Builder page(Integer page) {
            this.page = Optional.ofNullable(page);

            return this;
        }

        public Builder page(Optional<Integer> page) {
            this.page = page;
            return this;
        }

        /**
         * Sets value for `sortDirection`
         * (Optional) String
         *
         * - Sort creation time from newest to oldest: pass in the value `desc`.
         * - Sort creation time from oldest to newest: pass in the value `asc`.
         *
         * If `sort_direction` is not included, the default order is oldest to newest.
         */
        @JsonSetter("sort_direction")
        public Builder sortDirection(String sortDirection) {
            this.sortDirection = Optional.ofNullable(sortDirection);

            return this;
        }

        public Builder sortDirection(Optional<String> sortDirection) {
            this.sortDirection = sortDirection;
            return this;
        }


        public ListRequest build() {
            return new ListRequest(
                       includeArchived,
                       lastEditTimeGt,
                       page,
                       sortDirection
                   );
        }
    }

}



