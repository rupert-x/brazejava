
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.resources.campaigns.list;

import java.io.IOException;
import java.util.Map;

import com.fasterxml.jackson.core.type.TypeReference;
import com.yourorg.brazejava.core.ApiException;
import com.yourorg.brazejava.core.BaseClient;
import com.yourorg.brazejava.core.HttpRequestBuilder;
import com.yourorg.brazejava.core.RequestOptions;
import com.yourorg.brazejava.core.ResponseHandler;
import com.yourorg.brazejava.resources.campaigns.list.params.ListRequest;


public class ListClient {
    protected final BaseClient baseClient;

    public ListClient(BaseClient baseClient) {
        this.baseClient = baseClient;

    }

    /**
    * Export Campaign List
    *
    * > Use this endpoint to export a list of campaigns, each of which will include its name, campaign API identifier, whether it is an API campaign, and tags associated with the campaign.
    *
    *
    * The campaigns are returned in groups of 100 sorted by time of creation (oldest to newest by default).
    *
    * To use this endpoint, you’ll need to generate an API key with the `campaigns.list` permission.
    *
    * ## Rate limit
    *
    * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
    *
    * ## Campaign list endpoint API response
    *
    * ``` json
    * Content-Type: application/json
    * Authorization: Bearer YOUR-REST-API-KEY
    * {
    *     "message": (required, string) the status of the export, returns 'success' when completed without errors,
    *     "campaigns" : [
    *         {
    *             "id" : (string) Campaign API Identifier,
    *             "last_edited": (ISO 8601 string) the last edited time for the message
    *             "name" : (string) campaign name,
    *             "is_api_campaign" : (boolean) whether the campaign is an API Campaign,
    *             "tags" : (array) tag names associated with the campaign
    *         },
    *         ...
    *     ]
    * }
    *
    * ```
    *
    * > **Tip:** For help with CSV and API exports, visit [Export troubleshooting](https://www.braze.com/docs/user_guide/data_and_analytics/export_braze_data/export_troubleshooting/).
    *
    * GET /campaigns/list
    */
    public Map<?, ?> list() {
        return list(ListRequest.builder().build(), null);
    }


    /**
    * Export Campaign List
    *
    * > Use this endpoint to export a list of campaigns, each of which will include its name, campaign API identifier, whether it is an API campaign, and tags associated with the campaign.
    *
    *
    * The campaigns are returned in groups of 100 sorted by time of creation (oldest to newest by default).
    *
    * To use this endpoint, you’ll need to generate an API key with the `campaigns.list` permission.
    *
    * ## Rate limit
    *
    * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
    *
    * ## Campaign list endpoint API response
    *
    * ``` json
    * Content-Type: application/json
    * Authorization: Bearer YOUR-REST-API-KEY
    * {
    *     "message": (required, string) the status of the export, returns 'success' when completed without errors,
    *     "campaigns" : [
    *         {
    *             "id" : (string) Campaign API Identifier,
    *             "last_edited": (ISO 8601 string) the last edited time for the message
    *             "name" : (string) campaign name,
    *             "is_api_campaign" : (boolean) whether the campaign is an API Campaign,
    *             "tags" : (array) tag names associated with the campaign
    *         },
    *         ...
    *     ]
    * }
    *
    * ```
    *
    * > **Tip:** For help with CSV and API exports, visit [Export troubleshooting](https://www.braze.com/docs/user_guide/data_and_analytics/export_braze_data/export_troubleshooting/).
    *
    * GET /campaigns/list
    */
    public Map<?, ?> list(ListRequest request) {
        return list(request, null);
    }


    /**
    * Export Campaign List
    *
    * > Use this endpoint to export a list of campaigns, each of which will include its name, campaign API identifier, whether it is an API campaign, and tags associated with the campaign.
    *
    *
    * The campaigns are returned in groups of 100 sorted by time of creation (oldest to newest by default).
    *
    * To use this endpoint, you’ll need to generate an API key with the `campaigns.list` permission.
    *
    * ## Rate limit
    *
    * We apply the default Braze rate limit of 250,000 requests per hour to this endpoint, as documented in [API rate limits](https://www.braze.com/docs/api/api_limits/).
    *
    * ## Campaign list endpoint API response
    *
    * ``` json
    * Content-Type: application/json
    * Authorization: Bearer YOUR-REST-API-KEY
    * {
    *     "message": (required, string) the status of the export, returns 'success' when completed without errors,
    *     "campaigns" : [
    *         {
    *             "id" : (string) Campaign API Identifier,
    *             "last_edited": (ISO 8601 string) the last edited time for the message
    *             "name" : (string) campaign name,
    *             "is_api_campaign" : (boolean) whether the campaign is an API Campaign,
    *             "tags" : (array) tag names associated with the campaign
    *         },
    *         ...
    *     ]
    * }
    *
    * ```
    *
    * > **Tip:** For help with CSV and API exports, visit [Export troubleshooting](https://www.braze.com/docs/user_guide/data_and_analytics/export_braze_data/export_troubleshooting/).
    *
    * GET /campaigns/list
    */
    public Map<?, ?> list(ListRequest request, RequestOptions requestOptions) {

        try {
            okhttp3.Response response = new HttpRequestBuilder()
            .baseUrl(this.baseClient.baseUrl())
            .path("/campaigns/list")
            .addQueryParam("include_archived", request.getIncludeArchived(), "form", true)
            .addQueryParam("last_edit.time[gt]", request.getLastEditTimeGt(), "form", true)
            .addQueryParam("page", request.getPage(), "form", true)
            .addQueryParam("sort_direction", request.getSortDirection(), "form", true)
            .method("GET")
            .addAuth(baseClient.getAuth("BearerAuth"))
            .execute();
            return ResponseHandler.processJsonResponse(response, new TypeReference<Map<?, ?>>() {});
        } catch (IOException e) {
            throw new ApiException("Error executing HTTP request", e);
        }
    }


}
