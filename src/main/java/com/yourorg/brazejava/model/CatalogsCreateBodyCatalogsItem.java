
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * CatalogsCreateBodyCatalogsItem
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogsCreateBodyCatalogsItem.Builder.class)
public final class CatalogsCreateBodyCatalogsItem {
    private final Optional<String> description;
    private final Optional<List<CatalogsCreateBodyCatalogsItemFieldsItem>> fields;
    private final Optional<String> name;

    private CatalogsCreateBodyCatalogsItem(
        Optional<String> description,
        Optional<List<CatalogsCreateBodyCatalogsItemFieldsItem>> fields,
        Optional<String> name
    ) {
        this.description = description;
        this.fields = fields;
        this.name = name;
    }

    /**
     * Retrieves value for `description`
     */
    @JsonProperty("description")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getDescription() {
        return description.orElse(null);
    }

    /**
     * Retrieves value for `fields`
     */
    @JsonProperty("fields")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<CatalogsCreateBodyCatalogsItemFieldsItem> getFields() {
        return fields.orElse(null);
    }

    /**
     * Retrieves value for `name`
     */
    @JsonProperty("name")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getName() {
        return name.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof CatalogsCreateBodyCatalogsItem &&
               equalTo((CatalogsCreateBodyCatalogsItem) other);
    }

    private boolean equalTo(CatalogsCreateBodyCatalogsItem other) {
        return
            description.equals(other.description) &&

            fields.equals(other.fields) &&

            name.equals(other.name)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.description,
                   this.fields,
                   this.name
               );
    }

    @Override
    public String toString() {
        return "CatalogsCreateBodyCatalogsItem{" +
               "description=" + description +
               "fields=" + fields +
               "name=" + name +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> description = Optional.empty();
        private Optional<List<CatalogsCreateBodyCatalogsItemFieldsItem>> fields = Optional.empty();
        private Optional<String> name = Optional.empty();

        private Builder() {}

        public Builder from(CatalogsCreateBodyCatalogsItem other) {
            description(other.getDescription());
            fields(other.getFields());
            name(other.getName());
            return this;
        }

        /**
         * Sets value for `description`
         */
        @JsonSetter("description")
        public Builder description(String description) {
            this.description = Optional.ofNullable(description);

            return this;
        }

        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        /**
         * Sets value for `fields`
         */
        @JsonSetter("fields")
        public Builder fields(List<CatalogsCreateBodyCatalogsItemFieldsItem> fields) {
            this.fields = Optional.ofNullable(fields);

            return this;
        }

        public Builder fields(Optional<List<CatalogsCreateBodyCatalogsItemFieldsItem>> fields) {
            this.fields = fields;
            return this;
        }

        /**
         * Sets value for `name`
         */
        @JsonSetter("name")
        public Builder name(String name) {
            this.name = Optional.ofNullable(name);

            return this;
        }

        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }


        public CatalogsCreateBodyCatalogsItem build() {
            return new CatalogsCreateBodyCatalogsItem(
                       description,
                       fields,
                       name
                   );
        }
    }

}



