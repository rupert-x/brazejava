
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * Error_
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Error_.Builder.class)
public final class Error_ {
    private final Optional<List<String>> errors;
    private final Optional<String> message;

    private Error_(
        Optional<List<String>> errors,
        Optional<String> message
    ) {
        this.errors = errors;
        this.message = message;
    }

    /**
     * Retrieves value for `errors`
     */
    @JsonProperty("errors")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<String> getErrors() {
        return errors.orElse(null);
    }

    /**
     * Retrieves value for `message`
     */
    @JsonProperty("message")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getMessage() {
        return message.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof Error_ && equalTo((Error_) other);
    }

    private boolean equalTo(Error_ other) {
        return
            errors.equals(other.errors) &&

            message.equals(other.message)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.errors,
                   this.message
               );
    }

    @Override
    public String toString() {
        return "Error_{" +
               "errors=" + errors +
               "message=" + message +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> errors = Optional.empty();
        private Optional<String> message = Optional.empty();

        private Builder() {}

        public Builder from(Error_ other) {
            errors(other.getErrors());
            message(other.getMessage());
            return this;
        }

        /**
         * Sets value for `errors`
         */
        @JsonSetter("errors")
        public Builder errors(List<String> errors) {
            this.errors = Optional.ofNullable(errors);

            return this;
        }

        public Builder errors(Optional<List<String>> errors) {
            this.errors = errors;
            return this;
        }

        /**
         * Sets value for `message`
         */
        @JsonSetter("message")
        public Builder message(String message) {
            this.message = Optional.ofNullable(message);

            return this;
        }

        public Builder message(Optional<String> message) {
            this.message = message;
            return this;
        }


        public Error_ build() {
            return new Error_(
                       errors,
                       message
                   );
        }
    }

}



