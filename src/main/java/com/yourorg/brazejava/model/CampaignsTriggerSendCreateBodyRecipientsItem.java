
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.Map;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * CampaignsTriggerSendCreateBodyRecipientsItem
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CampaignsTriggerSendCreateBodyRecipientsItem.Builder.class)
public final class CampaignsTriggerSendCreateBodyRecipientsItem {
    private final Optional<CampaignsTriggerSendCreateBodyRecipientsItemAttributes> attributes;
    private final Optional<String> externalUserId;
    private final Optional<Boolean> sendToExistingOnly;
    private final Optional<Map<?, ?>> triggerProperties;
    private final Optional<CampaignsTriggerSendCreateBodyRecipientsItemUserAlias> userAlias;

    private CampaignsTriggerSendCreateBodyRecipientsItem(
        Optional<CampaignsTriggerSendCreateBodyRecipientsItemAttributes> attributes,
        Optional<String> externalUserId,
        Optional<Boolean> sendToExistingOnly,
        Optional<Map<?, ?>> triggerProperties,
        Optional<CampaignsTriggerSendCreateBodyRecipientsItemUserAlias> userAlias
    ) {
        this.attributes = attributes;
        this.externalUserId = externalUserId;
        this.sendToExistingOnly = sendToExistingOnly;
        this.triggerProperties = triggerProperties;
        this.userAlias = userAlias;
    }

    /**
     * Retrieves value for `attributes`
     */
    @JsonProperty("attributes")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public CampaignsTriggerSendCreateBodyRecipientsItemAttributes getAttributes() {
        return attributes.orElse(null);
    }

    /**
     * Retrieves value for `externalUserId`
     */
    @JsonProperty("external_user_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getExternalUserId() {
        return externalUserId.orElse(null);
    }

    /**
     * Retrieves value for `sendToExistingOnly`
     */
    @JsonProperty("send_to_existing_only")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public Boolean getSendToExistingOnly() {
        return sendToExistingOnly.orElse(null);
    }

    /**
     * Retrieves value for `triggerProperties`
     */
    @JsonProperty("trigger_properties")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public Map<?, ?> getTriggerProperties() {
        return triggerProperties.orElse(null);
    }

    /**
     * Retrieves value for `userAlias`
     */
    @JsonProperty("user_alias")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public CampaignsTriggerSendCreateBodyRecipientsItemUserAlias getUserAlias() {
        return userAlias.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof CampaignsTriggerSendCreateBodyRecipientsItem &&
               equalTo((CampaignsTriggerSendCreateBodyRecipientsItem) other);
    }

    private boolean equalTo(CampaignsTriggerSendCreateBodyRecipientsItem other) {
        return
            attributes.equals(other.attributes) &&

            externalUserId.equals(other.externalUserId) &&

            sendToExistingOnly.equals(other.sendToExistingOnly) &&

            triggerProperties.equals(other.triggerProperties) &&

            userAlias.equals(other.userAlias)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.attributes,
                   this.externalUserId,
                   this.sendToExistingOnly,
                   this.triggerProperties,
                   this.userAlias
               );
    }

    @Override
    public String toString() {
        return "CampaignsTriggerSendCreateBodyRecipientsItem{" +
               "attributes=" + attributes +
               "externalUserId=" + externalUserId +
               "sendToExistingOnly=" + sendToExistingOnly +
               "triggerProperties=" + triggerProperties +
               "userAlias=" + userAlias +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<CampaignsTriggerSendCreateBodyRecipientsItemAttributes> attributes =
            Optional.empty();
        private Optional<String> externalUserId = Optional.empty();
        private Optional<Boolean> sendToExistingOnly = Optional.empty();
        private Optional<Map<?, ?>> triggerProperties = Optional.empty();
        private Optional<CampaignsTriggerSendCreateBodyRecipientsItemUserAlias> userAlias =
            Optional.empty();

        private Builder() {}

        public Builder from(CampaignsTriggerSendCreateBodyRecipientsItem other) {
            attributes(other.getAttributes());
            externalUserId(other.getExternalUserId());
            sendToExistingOnly(other.getSendToExistingOnly());
            triggerProperties(other.getTriggerProperties());
            userAlias(other.getUserAlias());
            return this;
        }

        /**
         * Sets value for `attributes`
         */
        @JsonSetter("attributes")
        public Builder attributes(CampaignsTriggerSendCreateBodyRecipientsItemAttributes attributes) {
            this.attributes = Optional.ofNullable(attributes);

            return this;
        }

        public Builder attributes(Optional<CampaignsTriggerSendCreateBodyRecipientsItemAttributes>
                                  attributes) {
            this.attributes = attributes;
            return this;
        }

        /**
         * Sets value for `externalUserId`
         */
        @JsonSetter("external_user_id")
        public Builder externalUserId(String externalUserId) {
            this.externalUserId = Optional.ofNullable(externalUserId);

            return this;
        }

        public Builder externalUserId(Optional<String> externalUserId) {
            this.externalUserId = externalUserId;
            return this;
        }

        /**
         * Sets value for `sendToExistingOnly`
         */
        @JsonSetter("send_to_existing_only")
        public Builder sendToExistingOnly(Boolean sendToExistingOnly) {
            this.sendToExistingOnly = Optional.ofNullable(sendToExistingOnly);

            return this;
        }

        public Builder sendToExistingOnly(Optional<Boolean> sendToExistingOnly) {
            this.sendToExistingOnly = sendToExistingOnly;
            return this;
        }

        /**
         * Sets value for `triggerProperties`
         */
        @JsonSetter("trigger_properties")
        public Builder triggerProperties(Map<?, ?> triggerProperties) {
            this.triggerProperties = Optional.ofNullable(triggerProperties);

            return this;
        }

        public Builder triggerProperties(Optional<Map<?, ?>> triggerProperties) {
            this.triggerProperties = triggerProperties;
            return this;
        }

        /**
         * Sets value for `userAlias`
         */
        @JsonSetter("user_alias")
        public Builder userAlias(CampaignsTriggerSendCreateBodyRecipientsItemUserAlias userAlias) {
            this.userAlias = Optional.ofNullable(userAlias);

            return this;
        }

        public Builder userAlias(Optional<CampaignsTriggerSendCreateBodyRecipientsItemUserAlias>
                                 userAlias) {
            this.userAlias = userAlias;
            return this;
        }


        public CampaignsTriggerSendCreateBodyRecipientsItem build() {
            return new CampaignsTriggerSendCreateBodyRecipientsItem(
                       attributes,
                       externalUserId,
                       sendToExistingOnly,
                       triggerProperties,
                       userAlias
                   );
        }
    }

}



