
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * UsersExternalIdsRenameCreateBodyExternalIdRenamesItem
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UsersExternalIdsRenameCreateBodyExternalIdRenamesItem.Builder.class)
public final class UsersExternalIdsRenameCreateBodyExternalIdRenamesItem {
    private final Optional<String> currentExternalId;
    private final Optional<String> newExternalId;

    private UsersExternalIdsRenameCreateBodyExternalIdRenamesItem(
        Optional<String> currentExternalId,
        Optional<String> newExternalId
    ) {
        this.currentExternalId = currentExternalId;
        this.newExternalId = newExternalId;
    }

    /**
     * Retrieves value for `currentExternalId`
     */
    @JsonProperty("current_external_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getCurrentExternalId() {
        return currentExternalId.orElse(null);
    }

    /**
     * Retrieves value for `newExternalId`
     */
    @JsonProperty("new_external_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getNewExternalId() {
        return newExternalId.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof UsersExternalIdsRenameCreateBodyExternalIdRenamesItem &&
               equalTo((UsersExternalIdsRenameCreateBodyExternalIdRenamesItem) other);
    }

    private boolean equalTo(UsersExternalIdsRenameCreateBodyExternalIdRenamesItem other) {
        return
            currentExternalId.equals(other.currentExternalId) &&

            newExternalId.equals(other.newExternalId)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.currentExternalId,
                   this.newExternalId
               );
    }

    @Override
    public String toString() {
        return "UsersExternalIdsRenameCreateBodyExternalIdRenamesItem{" +
               "currentExternalId=" + currentExternalId +
               "newExternalId=" + newExternalId +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> currentExternalId = Optional.empty();
        private Optional<String> newExternalId = Optional.empty();

        private Builder() {}

        public Builder from(UsersExternalIdsRenameCreateBodyExternalIdRenamesItem other) {
            currentExternalId(other.getCurrentExternalId());
            newExternalId(other.getNewExternalId());
            return this;
        }

        /**
         * Sets value for `currentExternalId`
         */
        @JsonSetter("current_external_id")
        public Builder currentExternalId(String currentExternalId) {
            this.currentExternalId = Optional.ofNullable(currentExternalId);

            return this;
        }

        public Builder currentExternalId(Optional<String> currentExternalId) {
            this.currentExternalId = currentExternalId;
            return this;
        }

        /**
         * Sets value for `newExternalId`
         */
        @JsonSetter("new_external_id")
        public Builder newExternalId(String newExternalId) {
            this.newExternalId = Optional.ofNullable(newExternalId);

            return this;
        }

        public Builder newExternalId(Optional<String> newExternalId) {
            this.newExternalId = newExternalId;
            return this;
        }


        public UsersExternalIdsRenameCreateBodyExternalIdRenamesItem build() {
            return new UsersExternalIdsRenameCreateBodyExternalIdRenamesItem(
                       currentExternalId,
                       newExternalId
                   );
        }
    }

}



