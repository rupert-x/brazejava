
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * CatalogsCreateBodyCatalogsItemFieldsItem
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogsCreateBodyCatalogsItemFieldsItem.Builder.class)
public final class CatalogsCreateBodyCatalogsItemFieldsItem {
    private final Optional<String> name;
    private final Optional<String> type;

    private CatalogsCreateBodyCatalogsItemFieldsItem(
        Optional<String> name,
        Optional<String> type
    ) {
        this.name = name;
        this.type = type;
    }

    /**
     * Retrieves value for `name`
     */
    @JsonProperty("name")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getName() {
        return name.orElse(null);
    }

    /**
     * Retrieves value for `type`
     */
    @JsonProperty("type")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getType() {
        return type.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof CatalogsCreateBodyCatalogsItemFieldsItem &&
               equalTo((CatalogsCreateBodyCatalogsItemFieldsItem) other);
    }

    private boolean equalTo(CatalogsCreateBodyCatalogsItemFieldsItem other) {
        return
            name.equals(other.name) &&

            type.equals(other.type)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.name,
                   this.type
               );
    }

    @Override
    public String toString() {
        return "CatalogsCreateBodyCatalogsItemFieldsItem{" +
               "name=" + name +
               "type=" + type +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> name = Optional.empty();
        private Optional<String> type = Optional.empty();

        private Builder() {}

        public Builder from(CatalogsCreateBodyCatalogsItemFieldsItem other) {
            name(other.getName());
            type(other.getType());
            return this;
        }

        /**
         * Sets value for `name`
         */
        @JsonSetter("name")
        public Builder name(String name) {
            this.name = Optional.ofNullable(name);

            return this;
        }

        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * Sets value for `type`
         */
        @JsonSetter("type")
        public Builder type(String type) {
            this.type = Optional.ofNullable(type);

            return this;
        }

        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }


        public CatalogsCreateBodyCatalogsItemFieldsItem build() {
            return new CatalogsCreateBodyCatalogsItemFieldsItem(
                       name,
                       type
                   );
        }
    }

}



