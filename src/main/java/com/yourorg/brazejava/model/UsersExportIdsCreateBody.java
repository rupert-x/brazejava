
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * UsersExportIdsCreateBody
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UsersExportIdsCreateBody.Builder.class)
public final class UsersExportIdsCreateBody {
    private final Optional<String> brazeId;
    private final Optional<String> deviceId;
    private final Optional<String> emailAddress;
    private final Optional<List<String>> externalIds;
    private final Optional<List<String>> fieldsToExport;
    private final Optional<String> phone;
    private final Optional<List<UsersExportIdsCreateBodyUserAliasesItem>> userAliases;

    private UsersExportIdsCreateBody(
        Optional<String> brazeId,
        Optional<String> deviceId,
        Optional<String> emailAddress,
        Optional<List<String>> externalIds,
        Optional<List<String>> fieldsToExport,
        Optional<String> phone,
        Optional<List<UsersExportIdsCreateBodyUserAliasesItem>> userAliases
    ) {
        this.brazeId = brazeId;
        this.deviceId = deviceId;
        this.emailAddress = emailAddress;
        this.externalIds = externalIds;
        this.fieldsToExport = fieldsToExport;
        this.phone = phone;
        this.userAliases = userAliases;
    }

    /**
     * Retrieves value for `brazeId`
     */
    @JsonProperty("braze_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getBrazeId() {
        return brazeId.orElse(null);
    }

    /**
     * Retrieves value for `deviceId`
     */
    @JsonProperty("device_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getDeviceId() {
        return deviceId.orElse(null);
    }

    /**
     * Retrieves value for `emailAddress`
     */
    @JsonProperty("email_address")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getEmailAddress() {
        return emailAddress.orElse(null);
    }

    /**
     * Retrieves value for `externalIds`
     */
    @JsonProperty("external_ids")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<String> getExternalIds() {
        return externalIds.orElse(null);
    }

    /**
     * Retrieves value for `fieldsToExport`
     */
    @JsonProperty("fields_to_export")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<String> getFieldsToExport() {
        return fieldsToExport.orElse(null);
    }

    /**
     * Retrieves value for `phone`
     */
    @JsonProperty("phone")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getPhone() {
        return phone.orElse(null);
    }

    /**
     * Retrieves value for `userAliases`
     */
    @JsonProperty("user_aliases")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<UsersExportIdsCreateBodyUserAliasesItem> getUserAliases() {
        return userAliases.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof UsersExportIdsCreateBody && equalTo((UsersExportIdsCreateBody) other);
    }

    private boolean equalTo(UsersExportIdsCreateBody other) {
        return
            brazeId.equals(other.brazeId) &&

            deviceId.equals(other.deviceId) &&

            emailAddress.equals(other.emailAddress) &&

            externalIds.equals(other.externalIds) &&

            fieldsToExport.equals(other.fieldsToExport) &&

            phone.equals(other.phone) &&

            userAliases.equals(other.userAliases)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.brazeId,
                   this.deviceId,
                   this.emailAddress,
                   this.externalIds,
                   this.fieldsToExport,
                   this.phone,
                   this.userAliases
               );
    }

    @Override
    public String toString() {
        return "UsersExportIdsCreateBody{" +
               "brazeId=" + brazeId +
               "deviceId=" + deviceId +
               "emailAddress=" + emailAddress +
               "externalIds=" + externalIds +
               "fieldsToExport=" + fieldsToExport +
               "phone=" + phone +
               "userAliases=" + userAliases +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> brazeId = Optional.empty();
        private Optional<String> deviceId = Optional.empty();
        private Optional<String> emailAddress = Optional.empty();
        private Optional<List<String>> externalIds = Optional.empty();
        private Optional<List<String>> fieldsToExport = Optional.empty();
        private Optional<String> phone = Optional.empty();
        private Optional<List<UsersExportIdsCreateBodyUserAliasesItem>> userAliases = Optional.empty();

        private Builder() {}

        public Builder from(UsersExportIdsCreateBody other) {
            brazeId(other.getBrazeId());
            deviceId(other.getDeviceId());
            emailAddress(other.getEmailAddress());
            externalIds(other.getExternalIds());
            fieldsToExport(other.getFieldsToExport());
            phone(other.getPhone());
            userAliases(other.getUserAliases());
            return this;
        }

        /**
         * Sets value for `brazeId`
         */
        @JsonSetter("braze_id")
        public Builder brazeId(String brazeId) {
            this.brazeId = Optional.ofNullable(brazeId);

            return this;
        }

        public Builder brazeId(Optional<String> brazeId) {
            this.brazeId = brazeId;
            return this;
        }

        /**
         * Sets value for `deviceId`
         */
        @JsonSetter("device_id")
        public Builder deviceId(String deviceId) {
            this.deviceId = Optional.ofNullable(deviceId);

            return this;
        }

        public Builder deviceId(Optional<String> deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        /**
         * Sets value for `emailAddress`
         */
        @JsonSetter("email_address")
        public Builder emailAddress(String emailAddress) {
            this.emailAddress = Optional.ofNullable(emailAddress);

            return this;
        }

        public Builder emailAddress(Optional<String> emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * Sets value for `externalIds`
         */
        @JsonSetter("external_ids")
        public Builder externalIds(List<String> externalIds) {
            this.externalIds = Optional.ofNullable(externalIds);

            return this;
        }

        public Builder externalIds(Optional<List<String>> externalIds) {
            this.externalIds = externalIds;
            return this;
        }

        /**
         * Sets value for `fieldsToExport`
         */
        @JsonSetter("fields_to_export")
        public Builder fieldsToExport(List<String> fieldsToExport) {
            this.fieldsToExport = Optional.ofNullable(fieldsToExport);

            return this;
        }

        public Builder fieldsToExport(Optional<List<String>> fieldsToExport) {
            this.fieldsToExport = fieldsToExport;
            return this;
        }

        /**
         * Sets value for `phone`
         */
        @JsonSetter("phone")
        public Builder phone(String phone) {
            this.phone = Optional.ofNullable(phone);

            return this;
        }

        public Builder phone(Optional<String> phone) {
            this.phone = phone;
            return this;
        }

        /**
         * Sets value for `userAliases`
         */
        @JsonSetter("user_aliases")
        public Builder userAliases(List<UsersExportIdsCreateBodyUserAliasesItem> userAliases) {
            this.userAliases = Optional.ofNullable(userAliases);

            return this;
        }

        public Builder userAliases(Optional<List<UsersExportIdsCreateBodyUserAliasesItem>> userAliases) {
            this.userAliases = userAliases;
            return this;
        }


        public UsersExportIdsCreateBody build() {
            return new UsersExportIdsCreateBody(
                       brazeId,
                       deviceId,
                       emailAddress,
                       externalIds,
                       fieldsToExport,
                       phone,
                       userAliases
                   );
        }
    }

}



