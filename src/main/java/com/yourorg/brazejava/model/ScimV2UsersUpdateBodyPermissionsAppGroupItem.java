
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * ScimV2UsersUpdateBodyPermissionsAppGroupItem
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ScimV2UsersUpdateBodyPermissionsAppGroupItem.Builder.class)
public final class ScimV2UsersUpdateBodyPermissionsAppGroupItem {
    private final Optional<String> appGroupName;
    private final Optional<List<String>> appGroupPermissions;
    private final Optional<List<ScimV2UsersUpdateBodyPermissionsAppGroupItemTeamItem>> team;

    private ScimV2UsersUpdateBodyPermissionsAppGroupItem(
        Optional<String> appGroupName,
        Optional<List<String>> appGroupPermissions,
        Optional<List<ScimV2UsersUpdateBodyPermissionsAppGroupItemTeamItem>> team
    ) {
        this.appGroupName = appGroupName;
        this.appGroupPermissions = appGroupPermissions;
        this.team = team;
    }

    /**
     * Retrieves value for `appGroupName`
     */
    @JsonProperty("appGroupName")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getAppGroupName() {
        return appGroupName.orElse(null);
    }

    /**
     * Retrieves value for `appGroupPermissions`
     */
    @JsonProperty("appGroupPermissions")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<String> getAppGroupPermissions() {
        return appGroupPermissions.orElse(null);
    }

    /**
     * Retrieves value for `team`
     */
    @JsonProperty("team")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<ScimV2UsersUpdateBodyPermissionsAppGroupItemTeamItem> getTeam() {
        return team.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof ScimV2UsersUpdateBodyPermissionsAppGroupItem &&
               equalTo((ScimV2UsersUpdateBodyPermissionsAppGroupItem) other);
    }

    private boolean equalTo(ScimV2UsersUpdateBodyPermissionsAppGroupItem other) {
        return
            appGroupName.equals(other.appGroupName) &&

            appGroupPermissions.equals(other.appGroupPermissions) &&

            team.equals(other.team)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.appGroupName,
                   this.appGroupPermissions,
                   this.team
               );
    }

    @Override
    public String toString() {
        return "ScimV2UsersUpdateBodyPermissionsAppGroupItem{" +
               "appGroupName=" + appGroupName +
               "appGroupPermissions=" + appGroupPermissions +
               "team=" + team +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> appGroupName = Optional.empty();
        private Optional<List<String>> appGroupPermissions = Optional.empty();
        private Optional<List<ScimV2UsersUpdateBodyPermissionsAppGroupItemTeamItem>> team =
            Optional.empty();

        private Builder() {}

        public Builder from(ScimV2UsersUpdateBodyPermissionsAppGroupItem other) {
            appGroupName(other.getAppGroupName());
            appGroupPermissions(other.getAppGroupPermissions());
            team(other.getTeam());
            return this;
        }

        /**
         * Sets value for `appGroupName`
         */
        @JsonSetter("appGroupName")
        public Builder appGroupName(String appGroupName) {
            this.appGroupName = Optional.ofNullable(appGroupName);

            return this;
        }

        public Builder appGroupName(Optional<String> appGroupName) {
            this.appGroupName = appGroupName;
            return this;
        }

        /**
         * Sets value for `appGroupPermissions`
         */
        @JsonSetter("appGroupPermissions")
        public Builder appGroupPermissions(List<String> appGroupPermissions) {
            this.appGroupPermissions = Optional.ofNullable(appGroupPermissions);

            return this;
        }

        public Builder appGroupPermissions(Optional<List<String>> appGroupPermissions) {
            this.appGroupPermissions = appGroupPermissions;
            return this;
        }

        /**
         * Sets value for `team`
         */
        @JsonSetter("team")
        public Builder team(List<ScimV2UsersUpdateBodyPermissionsAppGroupItemTeamItem> team) {
            this.team = Optional.ofNullable(team);

            return this;
        }

        public Builder team(Optional<List<ScimV2UsersUpdateBodyPermissionsAppGroupItemTeamItem>> team) {
            this.team = team;
            return this;
        }


        public ScimV2UsersUpdateBodyPermissionsAppGroupItem build() {
            return new ScimV2UsersUpdateBodyPermissionsAppGroupItem(
                       appGroupName,
                       appGroupPermissions,
                       team
                   );
        }
    }

}



