
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * UsersExternalIdsRenameCreateBody
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UsersExternalIdsRenameCreateBody.Builder.class)
public final class UsersExternalIdsRenameCreateBody {
    private final Optional<List<UsersExternalIdsRenameCreateBodyExternalIdRenamesItem>>
    externalIdRenames;

    private UsersExternalIdsRenameCreateBody(
        Optional<List<UsersExternalIdsRenameCreateBodyExternalIdRenamesItem>> externalIdRenames
    ) {
        this.externalIdRenames = externalIdRenames;
    }

    /**
     * Retrieves value for `externalIdRenames`
     */
    @JsonProperty("external_id_renames")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<UsersExternalIdsRenameCreateBodyExternalIdRenamesItem> getExternalIdRenames() {
        return externalIdRenames.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof UsersExternalIdsRenameCreateBody &&
               equalTo((UsersExternalIdsRenameCreateBody) other);
    }

    private boolean equalTo(UsersExternalIdsRenameCreateBody other) {
        return
            externalIdRenames.equals(other.externalIdRenames)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.externalIdRenames
               );
    }

    @Override
    public String toString() {
        return "UsersExternalIdsRenameCreateBody{" +
               "externalIdRenames=" + externalIdRenames +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<UsersExternalIdsRenameCreateBodyExternalIdRenamesItem>> externalIdRenames =
            Optional.empty();

        private Builder() {}

        public Builder from(UsersExternalIdsRenameCreateBody other) {
            externalIdRenames(other.getExternalIdRenames());
            return this;
        }

        /**
         * Sets value for `externalIdRenames`
         */
        @JsonSetter("external_id_renames")
        public Builder externalIdRenames(List<UsersExternalIdsRenameCreateBodyExternalIdRenamesItem>
                                         externalIdRenames) {
            this.externalIdRenames = Optional.ofNullable(externalIdRenames);

            return this;
        }

        public Builder externalIdRenames(
            Optional<List<UsersExternalIdsRenameCreateBodyExternalIdRenamesItem>> externalIdRenames) {
            this.externalIdRenames = externalIdRenames;
            return this;
        }


        public UsersExternalIdsRenameCreateBody build() {
            return new UsersExternalIdsRenameCreateBody(
                       externalIdRenames
                   );
        }
    }

}



