
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * ContentBlocksUpdateCreateBody
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ContentBlocksUpdateCreateBody.Builder.class)
public final class ContentBlocksUpdateCreateBody {
    private final Optional<String> content;
    private final Optional<String> contentBlockId;
    private final Optional<String> description;
    private final Optional<String> name;
    private final Optional<String> state;
    private final Optional<List<String>> tags;

    private ContentBlocksUpdateCreateBody(
        Optional<String> content,
        Optional<String> contentBlockId,
        Optional<String> description,
        Optional<String> name,
        Optional<String> state,
        Optional<List<String>> tags
    ) {
        this.content = content;
        this.contentBlockId = contentBlockId;
        this.description = description;
        this.name = name;
        this.state = state;
        this.tags = tags;
    }

    /**
     * Retrieves value for `content`
     */
    @JsonProperty("content")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getContent() {
        return content.orElse(null);
    }

    /**
     * Retrieves value for `contentBlockId`
     */
    @JsonProperty("content_block_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getContentBlockId() {
        return contentBlockId.orElse(null);
    }

    /**
     * Retrieves value for `description`
     */
    @JsonProperty("description")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getDescription() {
        return description.orElse(null);
    }

    /**
     * Retrieves value for `name`
     */
    @JsonProperty("name")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getName() {
        return name.orElse(null);
    }

    /**
     * Retrieves value for `state`
     */
    @JsonProperty("state")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getState() {
        return state.orElse(null);
    }

    /**
     * Retrieves value for `tags`
     */
    @JsonProperty("tags")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<String> getTags() {
        return tags.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof ContentBlocksUpdateCreateBody &&
               equalTo((ContentBlocksUpdateCreateBody) other);
    }

    private boolean equalTo(ContentBlocksUpdateCreateBody other) {
        return
            content.equals(other.content) &&

            contentBlockId.equals(other.contentBlockId) &&

            description.equals(other.description) &&

            name.equals(other.name) &&

            state.equals(other.state) &&

            tags.equals(other.tags)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.content,
                   this.contentBlockId,
                   this.description,
                   this.name,
                   this.state,
                   this.tags
               );
    }

    @Override
    public String toString() {
        return "ContentBlocksUpdateCreateBody{" +
               "content=" + content +
               "contentBlockId=" + contentBlockId +
               "description=" + description +
               "name=" + name +
               "state=" + state +
               "tags=" + tags +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> content = Optional.empty();
        private Optional<String> contentBlockId = Optional.empty();
        private Optional<String> description = Optional.empty();
        private Optional<String> name = Optional.empty();
        private Optional<String> state = Optional.empty();
        private Optional<List<String>> tags = Optional.empty();

        private Builder() {}

        public Builder from(ContentBlocksUpdateCreateBody other) {
            content(other.getContent());
            contentBlockId(other.getContentBlockId());
            description(other.getDescription());
            name(other.getName());
            state(other.getState());
            tags(other.getTags());
            return this;
        }

        /**
         * Sets value for `content`
         */
        @JsonSetter("content")
        public Builder content(String content) {
            this.content = Optional.ofNullable(content);

            return this;
        }

        public Builder content(Optional<String> content) {
            this.content = content;
            return this;
        }

        /**
         * Sets value for `contentBlockId`
         */
        @JsonSetter("content_block_id")
        public Builder contentBlockId(String contentBlockId) {
            this.contentBlockId = Optional.ofNullable(contentBlockId);

            return this;
        }

        public Builder contentBlockId(Optional<String> contentBlockId) {
            this.contentBlockId = contentBlockId;
            return this;
        }

        /**
         * Sets value for `description`
         */
        @JsonSetter("description")
        public Builder description(String description) {
            this.description = Optional.ofNullable(description);

            return this;
        }

        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        /**
         * Sets value for `name`
         */
        @JsonSetter("name")
        public Builder name(String name) {
            this.name = Optional.ofNullable(name);

            return this;
        }

        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * Sets value for `state`
         */
        @JsonSetter("state")
        public Builder state(String state) {
            this.state = Optional.ofNullable(state);

            return this;
        }

        public Builder state(Optional<String> state) {
            this.state = state;
            return this;
        }

        /**
         * Sets value for `tags`
         */
        @JsonSetter("tags")
        public Builder tags(List<String> tags) {
            this.tags = Optional.ofNullable(tags);

            return this;
        }

        public Builder tags(Optional<List<String>> tags) {
            this.tags = tags;
            return this;
        }


        public ContentBlocksUpdateCreateBody build() {
            return new ContentBlocksUpdateCreateBody(
                       content,
                       contentBlockId,
                       description,
                       name,
                       state,
                       tags
                   );
        }
    }

}



