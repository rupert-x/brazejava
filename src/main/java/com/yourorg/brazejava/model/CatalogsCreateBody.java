
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * CatalogsCreateBody
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CatalogsCreateBody.Builder.class)
public final class CatalogsCreateBody {
    private final Optional<List<CatalogsCreateBodyCatalogsItem>> catalogs;

    private CatalogsCreateBody(
        Optional<List<CatalogsCreateBodyCatalogsItem>> catalogs
    ) {
        this.catalogs = catalogs;
    }

    /**
     * Retrieves value for `catalogs`
     */
    @JsonProperty("catalogs")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<CatalogsCreateBodyCatalogsItem> getCatalogs() {
        return catalogs.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof CatalogsCreateBody && equalTo((CatalogsCreateBody) other);
    }

    private boolean equalTo(CatalogsCreateBody other) {
        return
            catalogs.equals(other.catalogs)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.catalogs
               );
    }

    @Override
    public String toString() {
        return "CatalogsCreateBody{" +
               "catalogs=" + catalogs +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<CatalogsCreateBodyCatalogsItem>> catalogs = Optional.empty();

        private Builder() {}

        public Builder from(CatalogsCreateBody other) {
            catalogs(other.getCatalogs());
            return this;
        }

        /**
         * Sets value for `catalogs`
         */
        @JsonSetter("catalogs")
        public Builder catalogs(List<CatalogsCreateBodyCatalogsItem> catalogs) {
            this.catalogs = Optional.ofNullable(catalogs);

            return this;
        }

        public Builder catalogs(Optional<List<CatalogsCreateBodyCatalogsItem>> catalogs) {
            this.catalogs = catalogs;
            return this;
        }


        public CatalogsCreateBody build() {
            return new CatalogsCreateBody(
                       catalogs
                   );
        }
    }

}



