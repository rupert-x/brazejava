
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * MessagesLiveActivityUpdateCreateBody
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MessagesLiveActivityUpdateCreateBody.Builder.class)
public final class MessagesLiveActivityUpdateCreateBody {
    private final Optional<String> activityId;
    private final Optional<String> appId;
    private final Optional<MessagesLiveActivityUpdateCreateBodyContentState> contentState;
    private final Optional<String> dismissalDate;
    private final Optional<Boolean> endActivity;
    private final Optional<MessagesLiveActivityUpdateCreateBodyNotification> notification;
    private final Optional<String> staleDate;

    private MessagesLiveActivityUpdateCreateBody(
        Optional<String> activityId,
        Optional<String> appId,
        Optional<MessagesLiveActivityUpdateCreateBodyContentState> contentState,
        Optional<String> dismissalDate,
        Optional<Boolean> endActivity,
        Optional<MessagesLiveActivityUpdateCreateBodyNotification> notification,
        Optional<String> staleDate
    ) {
        this.activityId = activityId;
        this.appId = appId;
        this.contentState = contentState;
        this.dismissalDate = dismissalDate;
        this.endActivity = endActivity;
        this.notification = notification;
        this.staleDate = staleDate;
    }

    /**
     * Retrieves value for `activityId`
     */
    @JsonProperty("activity_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getActivityId() {
        return activityId.orElse(null);
    }

    /**
     * Retrieves value for `appId`
     */
    @JsonProperty("app_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getAppId() {
        return appId.orElse(null);
    }

    /**
     * Retrieves value for `contentState`
     */
    @JsonProperty("content_state")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public MessagesLiveActivityUpdateCreateBodyContentState getContentState() {
        return contentState.orElse(null);
    }

    /**
     * Retrieves value for `dismissalDate`
     */
    @JsonProperty("dismissal_date")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getDismissalDate() {
        return dismissalDate.orElse(null);
    }

    /**
     * Retrieves value for `endActivity`
     */
    @JsonProperty("end_activity")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public Boolean getEndActivity() {
        return endActivity.orElse(null);
    }

    /**
     * Retrieves value for `notification`
     */
    @JsonProperty("notification")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public MessagesLiveActivityUpdateCreateBodyNotification getNotification() {
        return notification.orElse(null);
    }

    /**
     * Retrieves value for `staleDate`
     */
    @JsonProperty("stale_date")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getStaleDate() {
        return staleDate.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof MessagesLiveActivityUpdateCreateBody &&
               equalTo((MessagesLiveActivityUpdateCreateBody) other);
    }

    private boolean equalTo(MessagesLiveActivityUpdateCreateBody other) {
        return
            activityId.equals(other.activityId) &&

            appId.equals(other.appId) &&

            contentState.equals(other.contentState) &&

            dismissalDate.equals(other.dismissalDate) &&

            endActivity.equals(other.endActivity) &&

            notification.equals(other.notification) &&

            staleDate.equals(other.staleDate)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.activityId,
                   this.appId,
                   this.contentState,
                   this.dismissalDate,
                   this.endActivity,
                   this.notification,
                   this.staleDate
               );
    }

    @Override
    public String toString() {
        return "MessagesLiveActivityUpdateCreateBody{" +
               "activityId=" + activityId +
               "appId=" + appId +
               "contentState=" + contentState +
               "dismissalDate=" + dismissalDate +
               "endActivity=" + endActivity +
               "notification=" + notification +
               "staleDate=" + staleDate +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> activityId = Optional.empty();
        private Optional<String> appId = Optional.empty();
        private Optional<MessagesLiveActivityUpdateCreateBodyContentState> contentState = Optional.empty();
        private Optional<String> dismissalDate = Optional.empty();
        private Optional<Boolean> endActivity = Optional.empty();
        private Optional<MessagesLiveActivityUpdateCreateBodyNotification> notification = Optional.empty();
        private Optional<String> staleDate = Optional.empty();

        private Builder() {}

        public Builder from(MessagesLiveActivityUpdateCreateBody other) {
            activityId(other.getActivityId());
            appId(other.getAppId());
            contentState(other.getContentState());
            dismissalDate(other.getDismissalDate());
            endActivity(other.getEndActivity());
            notification(other.getNotification());
            staleDate(other.getStaleDate());
            return this;
        }

        /**
         * Sets value for `activityId`
         */
        @JsonSetter("activity_id")
        public Builder activityId(String activityId) {
            this.activityId = Optional.ofNullable(activityId);

            return this;
        }

        public Builder activityId(Optional<String> activityId) {
            this.activityId = activityId;
            return this;
        }

        /**
         * Sets value for `appId`
         */
        @JsonSetter("app_id")
        public Builder appId(String appId) {
            this.appId = Optional.ofNullable(appId);

            return this;
        }

        public Builder appId(Optional<String> appId) {
            this.appId = appId;
            return this;
        }

        /**
         * Sets value for `contentState`
         */
        @JsonSetter("content_state")
        public Builder contentState(MessagesLiveActivityUpdateCreateBodyContentState contentState) {
            this.contentState = Optional.ofNullable(contentState);

            return this;
        }

        public Builder contentState(Optional<MessagesLiveActivityUpdateCreateBodyContentState>
                                    contentState) {
            this.contentState = contentState;
            return this;
        }

        /**
         * Sets value for `dismissalDate`
         */
        @JsonSetter("dismissal_date")
        public Builder dismissalDate(String dismissalDate) {
            this.dismissalDate = Optional.ofNullable(dismissalDate);

            return this;
        }

        public Builder dismissalDate(Optional<String> dismissalDate) {
            this.dismissalDate = dismissalDate;
            return this;
        }

        /**
         * Sets value for `endActivity`
         */
        @JsonSetter("end_activity")
        public Builder endActivity(Boolean endActivity) {
            this.endActivity = Optional.ofNullable(endActivity);

            return this;
        }

        public Builder endActivity(Optional<Boolean> endActivity) {
            this.endActivity = endActivity;
            return this;
        }

        /**
         * Sets value for `notification`
         */
        @JsonSetter("notification")
        public Builder notification(MessagesLiveActivityUpdateCreateBodyNotification notification) {
            this.notification = Optional.ofNullable(notification);

            return this;
        }

        public Builder notification(Optional<MessagesLiveActivityUpdateCreateBodyNotification>
                                    notification) {
            this.notification = notification;
            return this;
        }

        /**
         * Sets value for `staleDate`
         */
        @JsonSetter("stale_date")
        public Builder staleDate(String staleDate) {
            this.staleDate = Optional.ofNullable(staleDate);

            return this;
        }

        public Builder staleDate(Optional<String> staleDate) {
            this.staleDate = staleDate;
            return this;
        }


        public MessagesLiveActivityUpdateCreateBody build() {
            return new MessagesLiveActivityUpdateCreateBody(
                       activityId,
                       appId,
                       contentState,
                       dismissalDate,
                       endActivity,
                       notification,
                       staleDate
                   );
        }
    }

}



