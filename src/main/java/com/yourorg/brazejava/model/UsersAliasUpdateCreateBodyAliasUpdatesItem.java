
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * UsersAliasUpdateCreateBodyAliasUpdatesItem
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UsersAliasUpdateCreateBodyAliasUpdatesItem.Builder.class)
public final class UsersAliasUpdateCreateBodyAliasUpdatesItem {
    private final Optional<String> aliasLabel;
    private final Optional<String> newAliasName;
    private final Optional<String> oldAliasName;

    private UsersAliasUpdateCreateBodyAliasUpdatesItem(
        Optional<String> aliasLabel,
        Optional<String> newAliasName,
        Optional<String> oldAliasName
    ) {
        this.aliasLabel = aliasLabel;
        this.newAliasName = newAliasName;
        this.oldAliasName = oldAliasName;
    }

    /**
     * Retrieves value for `aliasLabel`
     */
    @JsonProperty("alias_label")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getAliasLabel() {
        return aliasLabel.orElse(null);
    }

    /**
     * Retrieves value for `newAliasName`
     */
    @JsonProperty("new_alias_name")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getNewAliasName() {
        return newAliasName.orElse(null);
    }

    /**
     * Retrieves value for `oldAliasName`
     */
    @JsonProperty("old_alias_name")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getOldAliasName() {
        return oldAliasName.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof UsersAliasUpdateCreateBodyAliasUpdatesItem &&
               equalTo((UsersAliasUpdateCreateBodyAliasUpdatesItem) other);
    }

    private boolean equalTo(UsersAliasUpdateCreateBodyAliasUpdatesItem other) {
        return
            aliasLabel.equals(other.aliasLabel) &&

            newAliasName.equals(other.newAliasName) &&

            oldAliasName.equals(other.oldAliasName)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.aliasLabel,
                   this.newAliasName,
                   this.oldAliasName
               );
    }

    @Override
    public String toString() {
        return "UsersAliasUpdateCreateBodyAliasUpdatesItem{" +
               "aliasLabel=" + aliasLabel +
               "newAliasName=" + newAliasName +
               "oldAliasName=" + oldAliasName +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> aliasLabel = Optional.empty();
        private Optional<String> newAliasName = Optional.empty();
        private Optional<String> oldAliasName = Optional.empty();

        private Builder() {}

        public Builder from(UsersAliasUpdateCreateBodyAliasUpdatesItem other) {
            aliasLabel(other.getAliasLabel());
            newAliasName(other.getNewAliasName());
            oldAliasName(other.getOldAliasName());
            return this;
        }

        /**
         * Sets value for `aliasLabel`
         */
        @JsonSetter("alias_label")
        public Builder aliasLabel(String aliasLabel) {
            this.aliasLabel = Optional.ofNullable(aliasLabel);

            return this;
        }

        public Builder aliasLabel(Optional<String> aliasLabel) {
            this.aliasLabel = aliasLabel;
            return this;
        }

        /**
         * Sets value for `newAliasName`
         */
        @JsonSetter("new_alias_name")
        public Builder newAliasName(String newAliasName) {
            this.newAliasName = Optional.ofNullable(newAliasName);

            return this;
        }

        public Builder newAliasName(Optional<String> newAliasName) {
            this.newAliasName = newAliasName;
            return this;
        }

        /**
         * Sets value for `oldAliasName`
         */
        @JsonSetter("old_alias_name")
        public Builder oldAliasName(String oldAliasName) {
            this.oldAliasName = Optional.ofNullable(oldAliasName);

            return this;
        }

        public Builder oldAliasName(Optional<String> oldAliasName) {
            this.oldAliasName = oldAliasName;
            return this;
        }


        public UsersAliasUpdateCreateBodyAliasUpdatesItem build() {
            return new UsersAliasUpdateCreateBodyAliasUpdatesItem(
                       aliasLabel,
                       newAliasName,
                       oldAliasName
                   );
        }
    }

}



