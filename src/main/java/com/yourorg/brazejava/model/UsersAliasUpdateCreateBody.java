
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * UsersAliasUpdateCreateBody
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UsersAliasUpdateCreateBody.Builder.class)
public final class UsersAliasUpdateCreateBody {
    private final Optional<List<UsersAliasUpdateCreateBodyAliasUpdatesItem>> aliasUpdates;

    private UsersAliasUpdateCreateBody(
        Optional<List<UsersAliasUpdateCreateBodyAliasUpdatesItem>> aliasUpdates
    ) {
        this.aliasUpdates = aliasUpdates;
    }

    /**
     * Retrieves value for `aliasUpdates`
     */
    @JsonProperty("alias_updates")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<UsersAliasUpdateCreateBodyAliasUpdatesItem> getAliasUpdates() {
        return aliasUpdates.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof UsersAliasUpdateCreateBody && equalTo((UsersAliasUpdateCreateBody) other);
    }

    private boolean equalTo(UsersAliasUpdateCreateBody other) {
        return
            aliasUpdates.equals(other.aliasUpdates)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.aliasUpdates
               );
    }

    @Override
    public String toString() {
        return "UsersAliasUpdateCreateBody{" +
               "aliasUpdates=" + aliasUpdates +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<UsersAliasUpdateCreateBodyAliasUpdatesItem>> aliasUpdates = Optional.empty();

        private Builder() {}

        public Builder from(UsersAliasUpdateCreateBody other) {
            aliasUpdates(other.getAliasUpdates());
            return this;
        }

        /**
         * Sets value for `aliasUpdates`
         */
        @JsonSetter("alias_updates")
        public Builder aliasUpdates(List<UsersAliasUpdateCreateBodyAliasUpdatesItem> aliasUpdates) {
            this.aliasUpdates = Optional.ofNullable(aliasUpdates);

            return this;
        }

        public Builder aliasUpdates(Optional<List<UsersAliasUpdateCreateBodyAliasUpdatesItem>>
                                    aliasUpdates) {
            this.aliasUpdates = aliasUpdates;
            return this;
        }


        public UsersAliasUpdateCreateBody build() {
            return new UsersAliasUpdateCreateBody(
                       aliasUpdates
                   );
        }
    }

}



