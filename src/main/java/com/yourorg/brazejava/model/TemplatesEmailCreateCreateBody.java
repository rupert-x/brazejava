
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * TemplatesEmailCreateCreateBody
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TemplatesEmailCreateCreateBody.Builder.class)
public final class TemplatesEmailCreateCreateBody {
    private final Optional<String> body;
    private final Optional<String> plaintextBody;
    private final Optional<String> preheader;
    private final Optional<String> subject;
    private final Optional<List<String>> tags;
    private final Optional<String> templateName;

    private TemplatesEmailCreateCreateBody(
        Optional<String> body,
        Optional<String> plaintextBody,
        Optional<String> preheader,
        Optional<String> subject,
        Optional<List<String>> tags,
        Optional<String> templateName
    ) {
        this.body = body;
        this.plaintextBody = plaintextBody;
        this.preheader = preheader;
        this.subject = subject;
        this.tags = tags;
        this.templateName = templateName;
    }

    /**
     * Retrieves value for `body`
     */
    @JsonProperty("body")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getBody() {
        return body.orElse(null);
    }

    /**
     * Retrieves value for `plaintextBody`
     */
    @JsonProperty("plaintext_body")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getPlaintextBody() {
        return plaintextBody.orElse(null);
    }

    /**
     * Retrieves value for `preheader`
     */
    @JsonProperty("preheader")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getPreheader() {
        return preheader.orElse(null);
    }

    /**
     * Retrieves value for `subject`
     */
    @JsonProperty("subject")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getSubject() {
        return subject.orElse(null);
    }

    /**
     * Retrieves value for `tags`
     */
    @JsonProperty("tags")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<String> getTags() {
        return tags.orElse(null);
    }

    /**
     * Retrieves value for `templateName`
     */
    @JsonProperty("template_name")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getTemplateName() {
        return templateName.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof TemplatesEmailCreateCreateBody &&
               equalTo((TemplatesEmailCreateCreateBody) other);
    }

    private boolean equalTo(TemplatesEmailCreateCreateBody other) {
        return
            body.equals(other.body) &&

            plaintextBody.equals(other.plaintextBody) &&

            preheader.equals(other.preheader) &&

            subject.equals(other.subject) &&

            tags.equals(other.tags) &&

            templateName.equals(other.templateName)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.body,
                   this.plaintextBody,
                   this.preheader,
                   this.subject,
                   this.tags,
                   this.templateName
               );
    }

    @Override
    public String toString() {
        return "TemplatesEmailCreateCreateBody{" +
               "body=" + body +
               "plaintextBody=" + plaintextBody +
               "preheader=" + preheader +
               "subject=" + subject +
               "tags=" + tags +
               "templateName=" + templateName +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> body = Optional.empty();
        private Optional<String> plaintextBody = Optional.empty();
        private Optional<String> preheader = Optional.empty();
        private Optional<String> subject = Optional.empty();
        private Optional<List<String>> tags = Optional.empty();
        private Optional<String> templateName = Optional.empty();

        private Builder() {}

        public Builder from(TemplatesEmailCreateCreateBody other) {
            body(other.getBody());
            plaintextBody(other.getPlaintextBody());
            preheader(other.getPreheader());
            subject(other.getSubject());
            tags(other.getTags());
            templateName(other.getTemplateName());
            return this;
        }

        /**
         * Sets value for `body`
         */
        @JsonSetter("body")
        public Builder body(String body) {
            this.body = Optional.ofNullable(body);

            return this;
        }

        public Builder body(Optional<String> body) {
            this.body = body;
            return this;
        }

        /**
         * Sets value for `plaintextBody`
         */
        @JsonSetter("plaintext_body")
        public Builder plaintextBody(String plaintextBody) {
            this.plaintextBody = Optional.ofNullable(plaintextBody);

            return this;
        }

        public Builder plaintextBody(Optional<String> plaintextBody) {
            this.plaintextBody = plaintextBody;
            return this;
        }

        /**
         * Sets value for `preheader`
         */
        @JsonSetter("preheader")
        public Builder preheader(String preheader) {
            this.preheader = Optional.ofNullable(preheader);

            return this;
        }

        public Builder preheader(Optional<String> preheader) {
            this.preheader = preheader;
            return this;
        }

        /**
         * Sets value for `subject`
         */
        @JsonSetter("subject")
        public Builder subject(String subject) {
            this.subject = Optional.ofNullable(subject);

            return this;
        }

        public Builder subject(Optional<String> subject) {
            this.subject = subject;
            return this;
        }

        /**
         * Sets value for `tags`
         */
        @JsonSetter("tags")
        public Builder tags(List<String> tags) {
            this.tags = Optional.ofNullable(tags);

            return this;
        }

        public Builder tags(Optional<List<String>> tags) {
            this.tags = tags;
            return this;
        }

        /**
         * Sets value for `templateName`
         */
        @JsonSetter("template_name")
        public Builder templateName(String templateName) {
            this.templateName = Optional.ofNullable(templateName);

            return this;
        }

        public Builder templateName(Optional<String> templateName) {
            this.templateName = templateName;
            return this;
        }


        public TemplatesEmailCreateCreateBody build() {
            return new TemplatesEmailCreateCreateBody(
                       body,
                       plaintextBody,
                       preheader,
                       subject,
                       tags,
                       templateName
                   );
        }
    }

}



