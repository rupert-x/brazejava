
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * MessagesScheduleCreateCreateBody
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MessagesScheduleCreateCreateBody.Builder.class)
public final class MessagesScheduleCreateCreateBody {
    private final Optional<MessagesScheduleCreateCreateBodyAudience> audience;
    private final Optional<Boolean> broadcast;
    private final Optional<String> campaignId;
    private final Optional<String> externalUserIds;
    private final Optional<MessagesScheduleCreateCreateBodyMessages> messages;
    private final Optional<Boolean> overrideMessagingLimits;
    private final Optional<String> recipientSubscriptionState;
    private final Optional<MessagesScheduleCreateCreateBodySchedule> schedule;
    private final Optional<String> segmentId;
    private final Optional<String> sendId;
    private final Optional<MessagesScheduleCreateCreateBodyUserAliases> userAliases;

    private MessagesScheduleCreateCreateBody(
        Optional<MessagesScheduleCreateCreateBodyAudience> audience,
        Optional<Boolean> broadcast,
        Optional<String> campaignId,
        Optional<String> externalUserIds,
        Optional<MessagesScheduleCreateCreateBodyMessages> messages,
        Optional<Boolean> overrideMessagingLimits,
        Optional<String> recipientSubscriptionState,
        Optional<MessagesScheduleCreateCreateBodySchedule> schedule,
        Optional<String> segmentId,
        Optional<String> sendId,
        Optional<MessagesScheduleCreateCreateBodyUserAliases> userAliases
    ) {
        this.audience = audience;
        this.broadcast = broadcast;
        this.campaignId = campaignId;
        this.externalUserIds = externalUserIds;
        this.messages = messages;
        this.overrideMessagingLimits = overrideMessagingLimits;
        this.recipientSubscriptionState = recipientSubscriptionState;
        this.schedule = schedule;
        this.segmentId = segmentId;
        this.sendId = sendId;
        this.userAliases = userAliases;
    }

    /**
     * Retrieves value for `audience`
     */
    @JsonProperty("audience")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public MessagesScheduleCreateCreateBodyAudience getAudience() {
        return audience.orElse(null);
    }

    /**
     * Retrieves value for `broadcast`
     */
    @JsonProperty("broadcast")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public Boolean getBroadcast() {
        return broadcast.orElse(null);
    }

    /**
     * Retrieves value for `campaignId`
     */
    @JsonProperty("campaign_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getCampaignId() {
        return campaignId.orElse(null);
    }

    /**
     * Retrieves value for `externalUserIds`
     */
    @JsonProperty("external_user_ids")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getExternalUserIds() {
        return externalUserIds.orElse(null);
    }

    /**
     * Retrieves value for `messages`
     */
    @JsonProperty("messages")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public MessagesScheduleCreateCreateBodyMessages getMessages() {
        return messages.orElse(null);
    }

    /**
     * Retrieves value for `overrideMessagingLimits`
     */
    @JsonProperty("override_messaging_limits")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public Boolean getOverrideMessagingLimits() {
        return overrideMessagingLimits.orElse(null);
    }

    /**
     * Retrieves value for `recipientSubscriptionState`
     */
    @JsonProperty("recipient_subscription_state")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getRecipientSubscriptionState() {
        return recipientSubscriptionState.orElse(null);
    }

    /**
     * Retrieves value for `schedule`
     */
    @JsonProperty("schedule")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public MessagesScheduleCreateCreateBodySchedule getSchedule() {
        return schedule.orElse(null);
    }

    /**
     * Retrieves value for `segmentId`
     */
    @JsonProperty("segment_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getSegmentId() {
        return segmentId.orElse(null);
    }

    /**
     * Retrieves value for `sendId`
     */
    @JsonProperty("send_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getSendId() {
        return sendId.orElse(null);
    }

    /**
     * Retrieves value for `userAliases`
     */
    @JsonProperty("user_aliases")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public MessagesScheduleCreateCreateBodyUserAliases getUserAliases() {
        return userAliases.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof MessagesScheduleCreateCreateBody &&
               equalTo((MessagesScheduleCreateCreateBody) other);
    }

    private boolean equalTo(MessagesScheduleCreateCreateBody other) {
        return
            audience.equals(other.audience) &&

            broadcast.equals(other.broadcast) &&

            campaignId.equals(other.campaignId) &&

            externalUserIds.equals(other.externalUserIds) &&

            messages.equals(other.messages) &&

            overrideMessagingLimits.equals(other.overrideMessagingLimits) &&

            recipientSubscriptionState.equals(other.recipientSubscriptionState) &&

            schedule.equals(other.schedule) &&

            segmentId.equals(other.segmentId) &&

            sendId.equals(other.sendId) &&

            userAliases.equals(other.userAliases)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.audience,
                   this.broadcast,
                   this.campaignId,
                   this.externalUserIds,
                   this.messages,
                   this.overrideMessagingLimits,
                   this.recipientSubscriptionState,
                   this.schedule,
                   this.segmentId,
                   this.sendId,
                   this.userAliases
               );
    }

    @Override
    public String toString() {
        return "MessagesScheduleCreateCreateBody{" +
               "audience=" + audience +
               "broadcast=" + broadcast +
               "campaignId=" + campaignId +
               "externalUserIds=" + externalUserIds +
               "messages=" + messages +
               "overrideMessagingLimits=" + overrideMessagingLimits +
               "recipientSubscriptionState=" + recipientSubscriptionState +
               "schedule=" + schedule +
               "segmentId=" + segmentId +
               "sendId=" + sendId +
               "userAliases=" + userAliases +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<MessagesScheduleCreateCreateBodyAudience> audience = Optional.empty();
        private Optional<Boolean> broadcast = Optional.empty();
        private Optional<String> campaignId = Optional.empty();
        private Optional<String> externalUserIds = Optional.empty();
        private Optional<MessagesScheduleCreateCreateBodyMessages> messages = Optional.empty();
        private Optional<Boolean> overrideMessagingLimits = Optional.empty();
        private Optional<String> recipientSubscriptionState = Optional.empty();
        private Optional<MessagesScheduleCreateCreateBodySchedule> schedule = Optional.empty();
        private Optional<String> segmentId = Optional.empty();
        private Optional<String> sendId = Optional.empty();
        private Optional<MessagesScheduleCreateCreateBodyUserAliases> userAliases = Optional.empty();

        private Builder() {}

        public Builder from(MessagesScheduleCreateCreateBody other) {
            audience(other.getAudience());
            broadcast(other.getBroadcast());
            campaignId(other.getCampaignId());
            externalUserIds(other.getExternalUserIds());
            messages(other.getMessages());
            overrideMessagingLimits(other.getOverrideMessagingLimits());
            recipientSubscriptionState(other.getRecipientSubscriptionState());
            schedule(other.getSchedule());
            segmentId(other.getSegmentId());
            sendId(other.getSendId());
            userAliases(other.getUserAliases());
            return this;
        }

        /**
         * Sets value for `audience`
         */
        @JsonSetter("audience")
        public Builder audience(MessagesScheduleCreateCreateBodyAudience audience) {
            this.audience = Optional.ofNullable(audience);

            return this;
        }

        public Builder audience(Optional<MessagesScheduleCreateCreateBodyAudience> audience) {
            this.audience = audience;
            return this;
        }

        /**
         * Sets value for `broadcast`
         */
        @JsonSetter("broadcast")
        public Builder broadcast(Boolean broadcast) {
            this.broadcast = Optional.ofNullable(broadcast);

            return this;
        }

        public Builder broadcast(Optional<Boolean> broadcast) {
            this.broadcast = broadcast;
            return this;
        }

        /**
         * Sets value for `campaignId`
         */
        @JsonSetter("campaign_id")
        public Builder campaignId(String campaignId) {
            this.campaignId = Optional.ofNullable(campaignId);

            return this;
        }

        public Builder campaignId(Optional<String> campaignId) {
            this.campaignId = campaignId;
            return this;
        }

        /**
         * Sets value for `externalUserIds`
         */
        @JsonSetter("external_user_ids")
        public Builder externalUserIds(String externalUserIds) {
            this.externalUserIds = Optional.ofNullable(externalUserIds);

            return this;
        }

        public Builder externalUserIds(Optional<String> externalUserIds) {
            this.externalUserIds = externalUserIds;
            return this;
        }

        /**
         * Sets value for `messages`
         */
        @JsonSetter("messages")
        public Builder messages(MessagesScheduleCreateCreateBodyMessages messages) {
            this.messages = Optional.ofNullable(messages);

            return this;
        }

        public Builder messages(Optional<MessagesScheduleCreateCreateBodyMessages> messages) {
            this.messages = messages;
            return this;
        }

        /**
         * Sets value for `overrideMessagingLimits`
         */
        @JsonSetter("override_messaging_limits")
        public Builder overrideMessagingLimits(Boolean overrideMessagingLimits) {
            this.overrideMessagingLimits = Optional.ofNullable(overrideMessagingLimits);

            return this;
        }

        public Builder overrideMessagingLimits(Optional<Boolean> overrideMessagingLimits) {
            this.overrideMessagingLimits = overrideMessagingLimits;
            return this;
        }

        /**
         * Sets value for `recipientSubscriptionState`
         */
        @JsonSetter("recipient_subscription_state")
        public Builder recipientSubscriptionState(String recipientSubscriptionState) {
            this.recipientSubscriptionState = Optional.ofNullable(recipientSubscriptionState);

            return this;
        }

        public Builder recipientSubscriptionState(Optional<String> recipientSubscriptionState) {
            this.recipientSubscriptionState = recipientSubscriptionState;
            return this;
        }

        /**
         * Sets value for `schedule`
         */
        @JsonSetter("schedule")
        public Builder schedule(MessagesScheduleCreateCreateBodySchedule schedule) {
            this.schedule = Optional.ofNullable(schedule);

            return this;
        }

        public Builder schedule(Optional<MessagesScheduleCreateCreateBodySchedule> schedule) {
            this.schedule = schedule;
            return this;
        }

        /**
         * Sets value for `segmentId`
         */
        @JsonSetter("segment_id")
        public Builder segmentId(String segmentId) {
            this.segmentId = Optional.ofNullable(segmentId);

            return this;
        }

        public Builder segmentId(Optional<String> segmentId) {
            this.segmentId = segmentId;
            return this;
        }

        /**
         * Sets value for `sendId`
         */
        @JsonSetter("send_id")
        public Builder sendId(String sendId) {
            this.sendId = Optional.ofNullable(sendId);

            return this;
        }

        public Builder sendId(Optional<String> sendId) {
            this.sendId = sendId;
            return this;
        }

        /**
         * Sets value for `userAliases`
         */
        @JsonSetter("user_aliases")
        public Builder userAliases(MessagesScheduleCreateCreateBodyUserAliases userAliases) {
            this.userAliases = Optional.ofNullable(userAliases);

            return this;
        }

        public Builder userAliases(Optional<MessagesScheduleCreateCreateBodyUserAliases> userAliases) {
            this.userAliases = userAliases;
            return this;
        }


        public MessagesScheduleCreateCreateBody build() {
            return new MessagesScheduleCreateCreateBody(
                       audience,
                       broadcast,
                       campaignId,
                       externalUserIds,
                       messages,
                       overrideMessagingLimits,
                       recipientSubscriptionState,
                       schedule,
                       segmentId,
                       sendId,
                       userAliases
                   );
        }
    }

}



