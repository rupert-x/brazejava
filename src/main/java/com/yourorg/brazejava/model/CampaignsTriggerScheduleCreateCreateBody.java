
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * CampaignsTriggerScheduleCreateCreateBody
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CampaignsTriggerScheduleCreateCreateBody.Builder.class)
public final class CampaignsTriggerScheduleCreateCreateBody {
    private final Optional<CampaignsTriggerScheduleCreateCreateBodyAudience> audience;
    private final Optional<Boolean> broadcast;
    private final Optional<String> campaignId;
    private final Optional<List<CampaignsTriggerScheduleCreateCreateBodyRecipientsItem>> recipients;
    private final Optional<CampaignsTriggerScheduleCreateCreateBodySchedule> schedule;
    private final Optional<String> sendId;
    private final Optional<Map<?, ?>> triggerProperties;

    private CampaignsTriggerScheduleCreateCreateBody(
        Optional<CampaignsTriggerScheduleCreateCreateBodyAudience> audience,
        Optional<Boolean> broadcast,
        Optional<String> campaignId,
        Optional<List<CampaignsTriggerScheduleCreateCreateBodyRecipientsItem>> recipients,
        Optional<CampaignsTriggerScheduleCreateCreateBodySchedule> schedule,
        Optional<String> sendId,
        Optional<Map<?, ?>> triggerProperties
    ) {
        this.audience = audience;
        this.broadcast = broadcast;
        this.campaignId = campaignId;
        this.recipients = recipients;
        this.schedule = schedule;
        this.sendId = sendId;
        this.triggerProperties = triggerProperties;
    }

    /**
     * Retrieves value for `audience`
     */
    @JsonProperty("audience")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public CampaignsTriggerScheduleCreateCreateBodyAudience getAudience() {
        return audience.orElse(null);
    }

    /**
     * Retrieves value for `broadcast`
     */
    @JsonProperty("broadcast")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public Boolean getBroadcast() {
        return broadcast.orElse(null);
    }

    /**
     * Retrieves value for `campaignId`
     */
    @JsonProperty("campaign_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getCampaignId() {
        return campaignId.orElse(null);
    }

    /**
     * Retrieves value for `recipients`
     */
    @JsonProperty("recipients")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<CampaignsTriggerScheduleCreateCreateBodyRecipientsItem> getRecipients() {
        return recipients.orElse(null);
    }

    /**
     * Retrieves value for `schedule`
     */
    @JsonProperty("schedule")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public CampaignsTriggerScheduleCreateCreateBodySchedule getSchedule() {
        return schedule.orElse(null);
    }

    /**
     * Retrieves value for `sendId`
     */
    @JsonProperty("send_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getSendId() {
        return sendId.orElse(null);
    }

    /**
     * Retrieves value for `triggerProperties`
     */
    @JsonProperty("trigger_properties")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public Map<?, ?> getTriggerProperties() {
        return triggerProperties.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof CampaignsTriggerScheduleCreateCreateBody &&
               equalTo((CampaignsTriggerScheduleCreateCreateBody) other);
    }

    private boolean equalTo(CampaignsTriggerScheduleCreateCreateBody other) {
        return
            audience.equals(other.audience) &&

            broadcast.equals(other.broadcast) &&

            campaignId.equals(other.campaignId) &&

            recipients.equals(other.recipients) &&

            schedule.equals(other.schedule) &&

            sendId.equals(other.sendId) &&

            triggerProperties.equals(other.triggerProperties)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.audience,
                   this.broadcast,
                   this.campaignId,
                   this.recipients,
                   this.schedule,
                   this.sendId,
                   this.triggerProperties
               );
    }

    @Override
    public String toString() {
        return "CampaignsTriggerScheduleCreateCreateBody{" +
               "audience=" + audience +
               "broadcast=" + broadcast +
               "campaignId=" + campaignId +
               "recipients=" + recipients +
               "schedule=" + schedule +
               "sendId=" + sendId +
               "triggerProperties=" + triggerProperties +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<CampaignsTriggerScheduleCreateCreateBodyAudience> audience = Optional.empty();
        private Optional<Boolean> broadcast = Optional.empty();
        private Optional<String> campaignId = Optional.empty();
        private Optional<List<CampaignsTriggerScheduleCreateCreateBodyRecipientsItem>> recipients =
            Optional.empty();
        private Optional<CampaignsTriggerScheduleCreateCreateBodySchedule> schedule = Optional.empty();
        private Optional<String> sendId = Optional.empty();
        private Optional<Map<?, ?>> triggerProperties = Optional.empty();

        private Builder() {}

        public Builder from(CampaignsTriggerScheduleCreateCreateBody other) {
            audience(other.getAudience());
            broadcast(other.getBroadcast());
            campaignId(other.getCampaignId());
            recipients(other.getRecipients());
            schedule(other.getSchedule());
            sendId(other.getSendId());
            triggerProperties(other.getTriggerProperties());
            return this;
        }

        /**
         * Sets value for `audience`
         */
        @JsonSetter("audience")
        public Builder audience(CampaignsTriggerScheduleCreateCreateBodyAudience audience) {
            this.audience = Optional.ofNullable(audience);

            return this;
        }

        public Builder audience(Optional<CampaignsTriggerScheduleCreateCreateBodyAudience> audience) {
            this.audience = audience;
            return this;
        }

        /**
         * Sets value for `broadcast`
         */
        @JsonSetter("broadcast")
        public Builder broadcast(Boolean broadcast) {
            this.broadcast = Optional.ofNullable(broadcast);

            return this;
        }

        public Builder broadcast(Optional<Boolean> broadcast) {
            this.broadcast = broadcast;
            return this;
        }

        /**
         * Sets value for `campaignId`
         */
        @JsonSetter("campaign_id")
        public Builder campaignId(String campaignId) {
            this.campaignId = Optional.ofNullable(campaignId);

            return this;
        }

        public Builder campaignId(Optional<String> campaignId) {
            this.campaignId = campaignId;
            return this;
        }

        /**
         * Sets value for `recipients`
         */
        @JsonSetter("recipients")
        public Builder recipients(List<CampaignsTriggerScheduleCreateCreateBodyRecipientsItem> recipients) {
            this.recipients = Optional.ofNullable(recipients);

            return this;
        }

        public Builder recipients(Optional<List<CampaignsTriggerScheduleCreateCreateBodyRecipientsItem>>
                                  recipients) {
            this.recipients = recipients;
            return this;
        }

        /**
         * Sets value for `schedule`
         */
        @JsonSetter("schedule")
        public Builder schedule(CampaignsTriggerScheduleCreateCreateBodySchedule schedule) {
            this.schedule = Optional.ofNullable(schedule);

            return this;
        }

        public Builder schedule(Optional<CampaignsTriggerScheduleCreateCreateBodySchedule> schedule) {
            this.schedule = schedule;
            return this;
        }

        /**
         * Sets value for `sendId`
         */
        @JsonSetter("send_id")
        public Builder sendId(String sendId) {
            this.sendId = Optional.ofNullable(sendId);

            return this;
        }

        public Builder sendId(Optional<String> sendId) {
            this.sendId = sendId;
            return this;
        }

        /**
         * Sets value for `triggerProperties`
         */
        @JsonSetter("trigger_properties")
        public Builder triggerProperties(Map<?, ?> triggerProperties) {
            this.triggerProperties = Optional.ofNullable(triggerProperties);

            return this;
        }

        public Builder triggerProperties(Optional<Map<?, ?>> triggerProperties) {
            this.triggerProperties = triggerProperties;
            return this;
        }


        public CampaignsTriggerScheduleCreateCreateBody build() {
            return new CampaignsTriggerScheduleCreateCreateBody(
                       audience,
                       broadcast,
                       campaignId,
                       recipients,
                       schedule,
                       sendId,
                       triggerProperties
                   );
        }
    }

}



