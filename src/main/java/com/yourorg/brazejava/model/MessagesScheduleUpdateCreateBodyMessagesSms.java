
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * MessagesScheduleUpdateCreateBodyMessagesSms
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MessagesScheduleUpdateCreateBodyMessagesSms.Builder.class)
public final class MessagesScheduleUpdateCreateBodyMessagesSms {
    private final Optional<String> appId;
    private final Optional<String> body;
    private final Optional<String> messageVariationId;
    private final Optional<String> subscriptionGroupId;

    private MessagesScheduleUpdateCreateBodyMessagesSms(
        Optional<String> appId,
        Optional<String> body,
        Optional<String> messageVariationId,
        Optional<String> subscriptionGroupId
    ) {
        this.appId = appId;
        this.body = body;
        this.messageVariationId = messageVariationId;
        this.subscriptionGroupId = subscriptionGroupId;
    }

    /**
     * Retrieves value for `appId`
     */
    @JsonProperty("app_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getAppId() {
        return appId.orElse(null);
    }

    /**
     * Retrieves value for `body`
     */
    @JsonProperty("body")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getBody() {
        return body.orElse(null);
    }

    /**
     * Retrieves value for `messageVariationId`
     */
    @JsonProperty("message_variation_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getMessageVariationId() {
        return messageVariationId.orElse(null);
    }

    /**
     * Retrieves value for `subscriptionGroupId`
     */
    @JsonProperty("subscription_group_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getSubscriptionGroupId() {
        return subscriptionGroupId.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof MessagesScheduleUpdateCreateBodyMessagesSms &&
               equalTo((MessagesScheduleUpdateCreateBodyMessagesSms) other);
    }

    private boolean equalTo(MessagesScheduleUpdateCreateBodyMessagesSms other) {
        return
            appId.equals(other.appId) &&

            body.equals(other.body) &&

            messageVariationId.equals(other.messageVariationId) &&

            subscriptionGroupId.equals(other.subscriptionGroupId)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.appId,
                   this.body,
                   this.messageVariationId,
                   this.subscriptionGroupId
               );
    }

    @Override
    public String toString() {
        return "MessagesScheduleUpdateCreateBodyMessagesSms{" +
               "appId=" + appId +
               "body=" + body +
               "messageVariationId=" + messageVariationId +
               "subscriptionGroupId=" + subscriptionGroupId +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> appId = Optional.empty();
        private Optional<String> body = Optional.empty();
        private Optional<String> messageVariationId = Optional.empty();
        private Optional<String> subscriptionGroupId = Optional.empty();

        private Builder() {}

        public Builder from(MessagesScheduleUpdateCreateBodyMessagesSms other) {
            appId(other.getAppId());
            body(other.getBody());
            messageVariationId(other.getMessageVariationId());
            subscriptionGroupId(other.getSubscriptionGroupId());
            return this;
        }

        /**
         * Sets value for `appId`
         */
        @JsonSetter("app_id")
        public Builder appId(String appId) {
            this.appId = Optional.ofNullable(appId);

            return this;
        }

        public Builder appId(Optional<String> appId) {
            this.appId = appId;
            return this;
        }

        /**
         * Sets value for `body`
         */
        @JsonSetter("body")
        public Builder body(String body) {
            this.body = Optional.ofNullable(body);

            return this;
        }

        public Builder body(Optional<String> body) {
            this.body = body;
            return this;
        }

        /**
         * Sets value for `messageVariationId`
         */
        @JsonSetter("message_variation_id")
        public Builder messageVariationId(String messageVariationId) {
            this.messageVariationId = Optional.ofNullable(messageVariationId);

            return this;
        }

        public Builder messageVariationId(Optional<String> messageVariationId) {
            this.messageVariationId = messageVariationId;
            return this;
        }

        /**
         * Sets value for `subscriptionGroupId`
         */
        @JsonSetter("subscription_group_id")
        public Builder subscriptionGroupId(String subscriptionGroupId) {
            this.subscriptionGroupId = Optional.ofNullable(subscriptionGroupId);

            return this;
        }

        public Builder subscriptionGroupId(Optional<String> subscriptionGroupId) {
            this.subscriptionGroupId = subscriptionGroupId;
            return this;
        }


        public MessagesScheduleUpdateCreateBodyMessagesSms build() {
            return new MessagesScheduleUpdateCreateBodyMessagesSms(
                       appId,
                       body,
                       messageVariationId,
                       subscriptionGroupId
                   );
        }
    }

}



