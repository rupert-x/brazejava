
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * ScimV2UsersCreateBody
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ScimV2UsersCreateBody.Builder.class)
public final class ScimV2UsersCreateBody {
    private final Optional<String> department;
    private final Optional<ScimV2UsersCreateBodyName> name;
    private final Optional<ScimV2UsersCreateBodyPermissions> permissions;
    private final Optional<List<String>> schemas;
    private final Optional<String> userName;

    private ScimV2UsersCreateBody(
        Optional<String> department,
        Optional<ScimV2UsersCreateBodyName> name,
        Optional<ScimV2UsersCreateBodyPermissions> permissions,
        Optional<List<String>> schemas,
        Optional<String> userName
    ) {
        this.department = department;
        this.name = name;
        this.permissions = permissions;
        this.schemas = schemas;
        this.userName = userName;
    }

    /**
     * Retrieves value for `department`
     */
    @JsonProperty("department")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getDepartment() {
        return department.orElse(null);
    }

    /**
     * Retrieves value for `name`
     */
    @JsonProperty("name")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public ScimV2UsersCreateBodyName getName() {
        return name.orElse(null);
    }

    /**
     * Retrieves value for `permissions`
     */
    @JsonProperty("permissions")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public ScimV2UsersCreateBodyPermissions getPermissions() {
        return permissions.orElse(null);
    }

    /**
     * Retrieves value for `schemas`
     */
    @JsonProperty("schemas")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<String> getSchemas() {
        return schemas.orElse(null);
    }

    /**
     * Retrieves value for `userName`
     */
    @JsonProperty("userName")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getUserName() {
        return userName.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof ScimV2UsersCreateBody && equalTo((ScimV2UsersCreateBody) other);
    }

    private boolean equalTo(ScimV2UsersCreateBody other) {
        return
            department.equals(other.department) &&

            name.equals(other.name) &&

            permissions.equals(other.permissions) &&

            schemas.equals(other.schemas) &&

            userName.equals(other.userName)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.department,
                   this.name,
                   this.permissions,
                   this.schemas,
                   this.userName
               );
    }

    @Override
    public String toString() {
        return "ScimV2UsersCreateBody{" +
               "department=" + department +
               "name=" + name +
               "permissions=" + permissions +
               "schemas=" + schemas +
               "userName=" + userName +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> department = Optional.empty();
        private Optional<ScimV2UsersCreateBodyName> name = Optional.empty();
        private Optional<ScimV2UsersCreateBodyPermissions> permissions = Optional.empty();
        private Optional<List<String>> schemas = Optional.empty();
        private Optional<String> userName = Optional.empty();

        private Builder() {}

        public Builder from(ScimV2UsersCreateBody other) {
            department(other.getDepartment());
            name(other.getName());
            permissions(other.getPermissions());
            schemas(other.getSchemas());
            userName(other.getUserName());
            return this;
        }

        /**
         * Sets value for `department`
         */
        @JsonSetter("department")
        public Builder department(String department) {
            this.department = Optional.ofNullable(department);

            return this;
        }

        public Builder department(Optional<String> department) {
            this.department = department;
            return this;
        }

        /**
         * Sets value for `name`
         */
        @JsonSetter("name")
        public Builder name(ScimV2UsersCreateBodyName name) {
            this.name = Optional.ofNullable(name);

            return this;
        }

        public Builder name(Optional<ScimV2UsersCreateBodyName> name) {
            this.name = name;
            return this;
        }

        /**
         * Sets value for `permissions`
         */
        @JsonSetter("permissions")
        public Builder permissions(ScimV2UsersCreateBodyPermissions permissions) {
            this.permissions = Optional.ofNullable(permissions);

            return this;
        }

        public Builder permissions(Optional<ScimV2UsersCreateBodyPermissions> permissions) {
            this.permissions = permissions;
            return this;
        }

        /**
         * Sets value for `schemas`
         */
        @JsonSetter("schemas")
        public Builder schemas(List<String> schemas) {
            this.schemas = Optional.ofNullable(schemas);

            return this;
        }

        public Builder schemas(Optional<List<String>> schemas) {
            this.schemas = schemas;
            return this;
        }

        /**
         * Sets value for `userName`
         */
        @JsonSetter("userName")
        public Builder userName(String userName) {
            this.userName = Optional.ofNullable(userName);

            return this;
        }

        public Builder userName(Optional<String> userName) {
            this.userName = userName;
            return this;
        }


        public ScimV2UsersCreateBody build() {
            return new ScimV2UsersCreateBody(
                       department,
                       name,
                       permissions,
                       schemas,
                       userName
                   );
        }
    }

}



