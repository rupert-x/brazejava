
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * SubscriptionStatusSetCreateBody
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SubscriptionStatusSetCreateBody.Builder.class)
public final class SubscriptionStatusSetCreateBody {
    private final Optional<String> externalId;
    private final Optional<List<String>> phone;
    private final Optional<String> subscriptionGroupId;
    private final Optional<String> subscriptionState;

    private SubscriptionStatusSetCreateBody(
        Optional<String> externalId,
        Optional<List<String>> phone,
        Optional<String> subscriptionGroupId,
        Optional<String> subscriptionState
    ) {
        this.externalId = externalId;
        this.phone = phone;
        this.subscriptionGroupId = subscriptionGroupId;
        this.subscriptionState = subscriptionState;
    }

    /**
     * Retrieves value for `externalId`
     */
    @JsonProperty("external_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getExternalId() {
        return externalId.orElse(null);
    }

    /**
     * Retrieves value for `phone`
     */
    @JsonProperty("phone")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<String> getPhone() {
        return phone.orElse(null);
    }

    /**
     * Retrieves value for `subscriptionGroupId`
     */
    @JsonProperty("subscription_group_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getSubscriptionGroupId() {
        return subscriptionGroupId.orElse(null);
    }

    /**
     * Retrieves value for `subscriptionState`
     */
    @JsonProperty("subscription_state")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getSubscriptionState() {
        return subscriptionState.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof SubscriptionStatusSetCreateBody &&
               equalTo((SubscriptionStatusSetCreateBody) other);
    }

    private boolean equalTo(SubscriptionStatusSetCreateBody other) {
        return
            externalId.equals(other.externalId) &&

            phone.equals(other.phone) &&

            subscriptionGroupId.equals(other.subscriptionGroupId) &&

            subscriptionState.equals(other.subscriptionState)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.externalId,
                   this.phone,
                   this.subscriptionGroupId,
                   this.subscriptionState
               );
    }

    @Override
    public String toString() {
        return "SubscriptionStatusSetCreateBody{" +
               "externalId=" + externalId +
               "phone=" + phone +
               "subscriptionGroupId=" + subscriptionGroupId +
               "subscriptionState=" + subscriptionState +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> externalId = Optional.empty();
        private Optional<List<String>> phone = Optional.empty();
        private Optional<String> subscriptionGroupId = Optional.empty();
        private Optional<String> subscriptionState = Optional.empty();

        private Builder() {}

        public Builder from(SubscriptionStatusSetCreateBody other) {
            externalId(other.getExternalId());
            phone(other.getPhone());
            subscriptionGroupId(other.getSubscriptionGroupId());
            subscriptionState(other.getSubscriptionState());
            return this;
        }

        /**
         * Sets value for `externalId`
         */
        @JsonSetter("external_id")
        public Builder externalId(String externalId) {
            this.externalId = Optional.ofNullable(externalId);

            return this;
        }

        public Builder externalId(Optional<String> externalId) {
            this.externalId = externalId;
            return this;
        }

        /**
         * Sets value for `phone`
         */
        @JsonSetter("phone")
        public Builder phone(List<String> phone) {
            this.phone = Optional.ofNullable(phone);

            return this;
        }

        public Builder phone(Optional<List<String>> phone) {
            this.phone = phone;
            return this;
        }

        /**
         * Sets value for `subscriptionGroupId`
         */
        @JsonSetter("subscription_group_id")
        public Builder subscriptionGroupId(String subscriptionGroupId) {
            this.subscriptionGroupId = Optional.ofNullable(subscriptionGroupId);

            return this;
        }

        public Builder subscriptionGroupId(Optional<String> subscriptionGroupId) {
            this.subscriptionGroupId = subscriptionGroupId;
            return this;
        }

        /**
         * Sets value for `subscriptionState`
         */
        @JsonSetter("subscription_state")
        public Builder subscriptionState(String subscriptionState) {
            this.subscriptionState = Optional.ofNullable(subscriptionState);

            return this;
        }

        public Builder subscriptionState(Optional<String> subscriptionState) {
            this.subscriptionState = subscriptionState;
            return this;
        }


        public SubscriptionStatusSetCreateBody build() {
            return new SubscriptionStatusSetCreateBody(
                       externalId,
                       phone,
                       subscriptionGroupId,
                       subscriptionState
                   );
        }
    }

}



