
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * UsersAliasNewCreateBody
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UsersAliasNewCreateBody.Builder.class)
public final class UsersAliasNewCreateBody {
    private final Optional<List<UsersAliasNewCreateBodyUserAliasesItem>> userAliases;

    private UsersAliasNewCreateBody(
        Optional<List<UsersAliasNewCreateBodyUserAliasesItem>> userAliases
    ) {
        this.userAliases = userAliases;
    }

    /**
     * Retrieves value for `userAliases`
     */
    @JsonProperty("user_aliases")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<UsersAliasNewCreateBodyUserAliasesItem> getUserAliases() {
        return userAliases.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof UsersAliasNewCreateBody && equalTo((UsersAliasNewCreateBody) other);
    }

    private boolean equalTo(UsersAliasNewCreateBody other) {
        return
            userAliases.equals(other.userAliases)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.userAliases
               );
    }

    @Override
    public String toString() {
        return "UsersAliasNewCreateBody{" +
               "userAliases=" + userAliases +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<UsersAliasNewCreateBodyUserAliasesItem>> userAliases = Optional.empty();

        private Builder() {}

        public Builder from(UsersAliasNewCreateBody other) {
            userAliases(other.getUserAliases());
            return this;
        }

        /**
         * Sets value for `userAliases`
         */
        @JsonSetter("user_aliases")
        public Builder userAliases(List<UsersAliasNewCreateBodyUserAliasesItem> userAliases) {
            this.userAliases = Optional.ofNullable(userAliases);

            return this;
        }

        public Builder userAliases(Optional<List<UsersAliasNewCreateBodyUserAliasesItem>> userAliases) {
            this.userAliases = userAliases;
            return this;
        }


        public UsersAliasNewCreateBody build() {
            return new UsersAliasNewCreateBody(
                       userAliases
                   );
        }
    }

}



