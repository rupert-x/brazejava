
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * EmailStatusCreateBody
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EmailStatusCreateBody.Builder.class)
public final class EmailStatusCreateBody {
    private final Optional<String> email;
    private final Optional<String> subscriptionState;

    private EmailStatusCreateBody(
        Optional<String> email,
        Optional<String> subscriptionState
    ) {
        this.email = email;
        this.subscriptionState = subscriptionState;
    }

    /**
     * Retrieves value for `email`
     */
    @JsonProperty("email")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getEmail() {
        return email.orElse(null);
    }

    /**
     * Retrieves value for `subscriptionState`
     */
    @JsonProperty("subscription_state")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getSubscriptionState() {
        return subscriptionState.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof EmailStatusCreateBody && equalTo((EmailStatusCreateBody) other);
    }

    private boolean equalTo(EmailStatusCreateBody other) {
        return
            email.equals(other.email) &&

            subscriptionState.equals(other.subscriptionState)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.email,
                   this.subscriptionState
               );
    }

    @Override
    public String toString() {
        return "EmailStatusCreateBody{" +
               "email=" + email +
               "subscriptionState=" + subscriptionState +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> email = Optional.empty();
        private Optional<String> subscriptionState = Optional.empty();

        private Builder() {}

        public Builder from(EmailStatusCreateBody other) {
            email(other.getEmail());
            subscriptionState(other.getSubscriptionState());
            return this;
        }

        /**
         * Sets value for `email`
         */
        @JsonSetter("email")
        public Builder email(String email) {
            this.email = Optional.ofNullable(email);

            return this;
        }

        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        /**
         * Sets value for `subscriptionState`
         */
        @JsonSetter("subscription_state")
        public Builder subscriptionState(String subscriptionState) {
            this.subscriptionState = Optional.ofNullable(subscriptionState);

            return this;
        }

        public Builder subscriptionState(Optional<String> subscriptionState) {
            this.subscriptionState = subscriptionState;
            return this;
        }


        public EmailStatusCreateBody build() {
            return new EmailStatusCreateBody(
                       email,
                       subscriptionState
                   );
        }
    }

}



