
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * CanvasTriggerScheduleCreateCreateBody
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CanvasTriggerScheduleCreateCreateBody.Builder.class)
public final class CanvasTriggerScheduleCreateCreateBody {
    private final Optional<CanvasTriggerScheduleCreateCreateBodyAudience> audience;
    private final Optional<Boolean> broadcast;
    private final Optional<Map<?, ?>> canvasEntryProperties;
    private final Optional<String> canvasId;
    private final Optional<List<CanvasTriggerScheduleCreateCreateBodyRecipientsItem>> recipients;
    private final Optional<CanvasTriggerScheduleCreateCreateBodySchedule> schedule;

    private CanvasTriggerScheduleCreateCreateBody(
        Optional<CanvasTriggerScheduleCreateCreateBodyAudience> audience,
        Optional<Boolean> broadcast,
        Optional<Map<?, ?>> canvasEntryProperties,
        Optional<String> canvasId,
        Optional<List<CanvasTriggerScheduleCreateCreateBodyRecipientsItem>> recipients,
        Optional<CanvasTriggerScheduleCreateCreateBodySchedule> schedule
    ) {
        this.audience = audience;
        this.broadcast = broadcast;
        this.canvasEntryProperties = canvasEntryProperties;
        this.canvasId = canvasId;
        this.recipients = recipients;
        this.schedule = schedule;
    }

    /**
     * Retrieves value for `audience`
     */
    @JsonProperty("audience")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public CanvasTriggerScheduleCreateCreateBodyAudience getAudience() {
        return audience.orElse(null);
    }

    /**
     * Retrieves value for `broadcast`
     */
    @JsonProperty("broadcast")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public Boolean getBroadcast() {
        return broadcast.orElse(null);
    }

    /**
     * Retrieves value for `canvasEntryProperties`
     */
    @JsonProperty("canvas_entry_properties")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public Map<?, ?> getCanvasEntryProperties() {
        return canvasEntryProperties.orElse(null);
    }

    /**
     * Retrieves value for `canvasId`
     */
    @JsonProperty("canvas_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getCanvasId() {
        return canvasId.orElse(null);
    }

    /**
     * Retrieves value for `recipients`
     */
    @JsonProperty("recipients")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<CanvasTriggerScheduleCreateCreateBodyRecipientsItem> getRecipients() {
        return recipients.orElse(null);
    }

    /**
     * Retrieves value for `schedule`
     */
    @JsonProperty("schedule")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public CanvasTriggerScheduleCreateCreateBodySchedule getSchedule() {
        return schedule.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof CanvasTriggerScheduleCreateCreateBody &&
               equalTo((CanvasTriggerScheduleCreateCreateBody) other);
    }

    private boolean equalTo(CanvasTriggerScheduleCreateCreateBody other) {
        return
            audience.equals(other.audience) &&

            broadcast.equals(other.broadcast) &&

            canvasEntryProperties.equals(other.canvasEntryProperties) &&

            canvasId.equals(other.canvasId) &&

            recipients.equals(other.recipients) &&

            schedule.equals(other.schedule)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.audience,
                   this.broadcast,
                   this.canvasEntryProperties,
                   this.canvasId,
                   this.recipients,
                   this.schedule
               );
    }

    @Override
    public String toString() {
        return "CanvasTriggerScheduleCreateCreateBody{" +
               "audience=" + audience +
               "broadcast=" + broadcast +
               "canvasEntryProperties=" + canvasEntryProperties +
               "canvasId=" + canvasId +
               "recipients=" + recipients +
               "schedule=" + schedule +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<CanvasTriggerScheduleCreateCreateBodyAudience> audience = Optional.empty();
        private Optional<Boolean> broadcast = Optional.empty();
        private Optional<Map<?, ?>> canvasEntryProperties = Optional.empty();
        private Optional<String> canvasId = Optional.empty();
        private Optional<List<CanvasTriggerScheduleCreateCreateBodyRecipientsItem>> recipients =
            Optional.empty();
        private Optional<CanvasTriggerScheduleCreateCreateBodySchedule> schedule = Optional.empty();

        private Builder() {}

        public Builder from(CanvasTriggerScheduleCreateCreateBody other) {
            audience(other.getAudience());
            broadcast(other.getBroadcast());
            canvasEntryProperties(other.getCanvasEntryProperties());
            canvasId(other.getCanvasId());
            recipients(other.getRecipients());
            schedule(other.getSchedule());
            return this;
        }

        /**
         * Sets value for `audience`
         */
        @JsonSetter("audience")
        public Builder audience(CanvasTriggerScheduleCreateCreateBodyAudience audience) {
            this.audience = Optional.ofNullable(audience);

            return this;
        }

        public Builder audience(Optional<CanvasTriggerScheduleCreateCreateBodyAudience> audience) {
            this.audience = audience;
            return this;
        }

        /**
         * Sets value for `broadcast`
         */
        @JsonSetter("broadcast")
        public Builder broadcast(Boolean broadcast) {
            this.broadcast = Optional.ofNullable(broadcast);

            return this;
        }

        public Builder broadcast(Optional<Boolean> broadcast) {
            this.broadcast = broadcast;
            return this;
        }

        /**
         * Sets value for `canvasEntryProperties`
         */
        @JsonSetter("canvas_entry_properties")
        public Builder canvasEntryProperties(Map<?, ?> canvasEntryProperties) {
            this.canvasEntryProperties = Optional.ofNullable(canvasEntryProperties);

            return this;
        }

        public Builder canvasEntryProperties(Optional<Map<?, ?>> canvasEntryProperties) {
            this.canvasEntryProperties = canvasEntryProperties;
            return this;
        }

        /**
         * Sets value for `canvasId`
         */
        @JsonSetter("canvas_id")
        public Builder canvasId(String canvasId) {
            this.canvasId = Optional.ofNullable(canvasId);

            return this;
        }

        public Builder canvasId(Optional<String> canvasId) {
            this.canvasId = canvasId;
            return this;
        }

        /**
         * Sets value for `recipients`
         */
        @JsonSetter("recipients")
        public Builder recipients(List<CanvasTriggerScheduleCreateCreateBodyRecipientsItem> recipients) {
            this.recipients = Optional.ofNullable(recipients);

            return this;
        }

        public Builder recipients(Optional<List<CanvasTriggerScheduleCreateCreateBodyRecipientsItem>>
                                  recipients) {
            this.recipients = recipients;
            return this;
        }

        /**
         * Sets value for `schedule`
         */
        @JsonSetter("schedule")
        public Builder schedule(CanvasTriggerScheduleCreateCreateBodySchedule schedule) {
            this.schedule = Optional.ofNullable(schedule);

            return this;
        }

        public Builder schedule(Optional<CanvasTriggerScheduleCreateCreateBodySchedule> schedule) {
            this.schedule = schedule;
            return this;
        }


        public CanvasTriggerScheduleCreateCreateBody build() {
            return new CanvasTriggerScheduleCreateCreateBody(
                       audience,
                       broadcast,
                       canvasEntryProperties,
                       canvasId,
                       recipients,
                       schedule
                   );
        }
    }

}



