
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * UsersAliasNewCreateBodyUserAliasesItem
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UsersAliasNewCreateBodyUserAliasesItem.Builder.class)
public final class UsersAliasNewCreateBodyUserAliasesItem {
    private final Optional<String> aliasLabel;
    private final Optional<String> aliasName;
    private final Optional<String> externalId;

    private UsersAliasNewCreateBodyUserAliasesItem(
        Optional<String> aliasLabel,
        Optional<String> aliasName,
        Optional<String> externalId
    ) {
        this.aliasLabel = aliasLabel;
        this.aliasName = aliasName;
        this.externalId = externalId;
    }

    /**
     * Retrieves value for `aliasLabel`
     */
    @JsonProperty("alias_label")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getAliasLabel() {
        return aliasLabel.orElse(null);
    }

    /**
     * Retrieves value for `aliasName`
     */
    @JsonProperty("alias_name")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getAliasName() {
        return aliasName.orElse(null);
    }

    /**
     * Retrieves value for `externalId`
     */
    @JsonProperty("external_id")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getExternalId() {
        return externalId.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof UsersAliasNewCreateBodyUserAliasesItem &&
               equalTo((UsersAliasNewCreateBodyUserAliasesItem) other);
    }

    private boolean equalTo(UsersAliasNewCreateBodyUserAliasesItem other) {
        return
            aliasLabel.equals(other.aliasLabel) &&

            aliasName.equals(other.aliasName) &&

            externalId.equals(other.externalId)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.aliasLabel,
                   this.aliasName,
                   this.externalId
               );
    }

    @Override
    public String toString() {
        return "UsersAliasNewCreateBodyUserAliasesItem{" +
               "aliasLabel=" + aliasLabel +
               "aliasName=" + aliasName +
               "externalId=" + externalId +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> aliasLabel = Optional.empty();
        private Optional<String> aliasName = Optional.empty();
        private Optional<String> externalId = Optional.empty();

        private Builder() {}

        public Builder from(UsersAliasNewCreateBodyUserAliasesItem other) {
            aliasLabel(other.getAliasLabel());
            aliasName(other.getAliasName());
            externalId(other.getExternalId());
            return this;
        }

        /**
         * Sets value for `aliasLabel`
         */
        @JsonSetter("alias_label")
        public Builder aliasLabel(String aliasLabel) {
            this.aliasLabel = Optional.ofNullable(aliasLabel);

            return this;
        }

        public Builder aliasLabel(Optional<String> aliasLabel) {
            this.aliasLabel = aliasLabel;
            return this;
        }

        /**
         * Sets value for `aliasName`
         */
        @JsonSetter("alias_name")
        public Builder aliasName(String aliasName) {
            this.aliasName = Optional.ofNullable(aliasName);

            return this;
        }

        public Builder aliasName(Optional<String> aliasName) {
            this.aliasName = aliasName;
            return this;
        }

        /**
         * Sets value for `externalId`
         */
        @JsonSetter("external_id")
        public Builder externalId(String externalId) {
            this.externalId = Optional.ofNullable(externalId);

            return this;
        }

        public Builder externalId(Optional<String> externalId) {
            this.externalId = externalId;
            return this;
        }


        public UsersAliasNewCreateBodyUserAliasesItem build() {
            return new UsersAliasNewCreateBodyUserAliasesItem(
                       aliasLabel,
                       aliasName,
                       externalId
                   );
        }
    }

}



