
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * UsersTrackCreateBody
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UsersTrackCreateBody.Builder.class)
public final class UsersTrackCreateBody {
    private final Optional<List<Map<?, ?>>> attributes;
    private final Optional<List<Map<?, ?>>> events;
    private final Optional<List<Map<?, ?>>> purchases;

    private UsersTrackCreateBody(
        Optional<List<Map<?, ?>>> attributes,
        Optional<List<Map<?, ?>>> events,
        Optional<List<Map<?, ?>>> purchases
    ) {
        this.attributes = attributes;
        this.events = events;
        this.purchases = purchases;
    }

    /**
     * Retrieves value for `attributes`
     */
    @JsonProperty("attributes")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<Map<?, ?>> getAttributes() {
        return attributes.orElse(null);
    }

    /**
     * Retrieves value for `events`
     */
    @JsonProperty("events")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<Map<?, ?>> getEvents() {
        return events.orElse(null);
    }

    /**
     * Retrieves value for `purchases`
     */
    @JsonProperty("purchases")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<Map<?, ?>> getPurchases() {
        return purchases.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof UsersTrackCreateBody && equalTo((UsersTrackCreateBody) other);
    }

    private boolean equalTo(UsersTrackCreateBody other) {
        return
            attributes.equals(other.attributes) &&

            events.equals(other.events) &&

            purchases.equals(other.purchases)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.attributes,
                   this.events,
                   this.purchases
               );
    }

    @Override
    public String toString() {
        return "UsersTrackCreateBody{" +
               "attributes=" + attributes +
               "events=" + events +
               "purchases=" + purchases +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Map<?, ?>>> attributes = Optional.empty();
        private Optional<List<Map<?, ?>>> events = Optional.empty();
        private Optional<List<Map<?, ?>>> purchases = Optional.empty();

        private Builder() {}

        public Builder from(UsersTrackCreateBody other) {
            attributes(other.getAttributes());
            events(other.getEvents());
            purchases(other.getPurchases());
            return this;
        }

        /**
         * Sets value for `attributes`
         */
        @JsonSetter("attributes")
        public Builder attributes(List<Map<?, ?>> attributes) {
            this.attributes = Optional.ofNullable(attributes);

            return this;
        }

        public Builder attributes(Optional<List<Map<?, ?>>> attributes) {
            this.attributes = attributes;
            return this;
        }

        /**
         * Sets value for `events`
         */
        @JsonSetter("events")
        public Builder events(List<Map<?, ?>> events) {
            this.events = Optional.ofNullable(events);

            return this;
        }

        public Builder events(Optional<List<Map<?, ?>>> events) {
            this.events = events;
            return this;
        }

        /**
         * Sets value for `purchases`
         */
        @JsonSetter("purchases")
        public Builder purchases(List<Map<?, ?>> purchases) {
            this.purchases = Optional.ofNullable(purchases);

            return this;
        }

        public Builder purchases(Optional<List<Map<?, ?>>> purchases) {
            this.purchases = purchases;
            return this;
        }


        public UsersTrackCreateBody build() {
            return new UsersTrackCreateBody(
                       attributes,
                       events,
                       purchases
                   );
        }
    }

}



