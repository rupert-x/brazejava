
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.List;
import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * ScimV2UsersUpdateBodyPermissions
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ScimV2UsersUpdateBodyPermissions.Builder.class)
public final class ScimV2UsersUpdateBodyPermissions {
    private final Optional<List<ScimV2UsersUpdateBodyPermissionsAppGroupItem>> appGroup;
    private final Optional<List<String>> companyPermissions;

    private ScimV2UsersUpdateBodyPermissions(
        Optional<List<ScimV2UsersUpdateBodyPermissionsAppGroupItem>> appGroup,
        Optional<List<String>> companyPermissions
    ) {
        this.appGroup = appGroup;
        this.companyPermissions = companyPermissions;
    }

    /**
     * Retrieves value for `appGroup`
     */
    @JsonProperty("appGroup")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<ScimV2UsersUpdateBodyPermissionsAppGroupItem> getAppGroup() {
        return appGroup.orElse(null);
    }

    /**
     * Retrieves value for `companyPermissions`
     */
    @JsonProperty("companyPermissions")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public List<String> getCompanyPermissions() {
        return companyPermissions.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof ScimV2UsersUpdateBodyPermissions &&
               equalTo((ScimV2UsersUpdateBodyPermissions) other);
    }

    private boolean equalTo(ScimV2UsersUpdateBodyPermissions other) {
        return
            appGroup.equals(other.appGroup) &&

            companyPermissions.equals(other.companyPermissions)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.appGroup,
                   this.companyPermissions
               );
    }

    @Override
    public String toString() {
        return "ScimV2UsersUpdateBodyPermissions{" +
               "appGroup=" + appGroup +
               "companyPermissions=" + companyPermissions +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<ScimV2UsersUpdateBodyPermissionsAppGroupItem>> appGroup = Optional.empty();
        private Optional<List<String>> companyPermissions = Optional.empty();

        private Builder() {}

        public Builder from(ScimV2UsersUpdateBodyPermissions other) {
            appGroup(other.getAppGroup());
            companyPermissions(other.getCompanyPermissions());
            return this;
        }

        /**
         * Sets value for `appGroup`
         */
        @JsonSetter("appGroup")
        public Builder appGroup(List<ScimV2UsersUpdateBodyPermissionsAppGroupItem> appGroup) {
            this.appGroup = Optional.ofNullable(appGroup);

            return this;
        }

        public Builder appGroup(Optional<List<ScimV2UsersUpdateBodyPermissionsAppGroupItem>> appGroup) {
            this.appGroup = appGroup;
            return this;
        }

        /**
         * Sets value for `companyPermissions`
         */
        @JsonSetter("companyPermissions")
        public Builder companyPermissions(List<String> companyPermissions) {
            this.companyPermissions = Optional.ofNullable(companyPermissions);

            return this;
        }

        public Builder companyPermissions(Optional<List<String>> companyPermissions) {
            this.companyPermissions = companyPermissions;
            return this;
        }


        public ScimV2UsersUpdateBodyPermissions build() {
            return new ScimV2UsersUpdateBodyPermissions(
                       appGroup,
                       companyPermissions
                   );
        }
    }

}



