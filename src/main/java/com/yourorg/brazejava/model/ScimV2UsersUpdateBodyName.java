
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava.model;

import java.util.Objects;
import java.util.Optional;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;


/**
 * ScimV2UsersUpdateBodyName
 */
@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ScimV2UsersUpdateBodyName.Builder.class)
public final class ScimV2UsersUpdateBodyName {
    private final Optional<String> familyName;
    private final Optional<String> givenName;

    private ScimV2UsersUpdateBodyName(
        Optional<String> familyName,
        Optional<String> givenName
    ) {
        this.familyName = familyName;
        this.givenName = givenName;
    }

    /**
     * Retrieves value for `familyName`
     */
    @JsonProperty("familyName")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getFamilyName() {
        return familyName.orElse(null);
    }

    /**
     * Retrieves value for `givenName`
     */
    @JsonProperty("givenName")
    @JsonInclude(JsonInclude.Include.NON_ABSENT)
    public String getGivenName() {
        return givenName.orElse(null);
    }


    @Override
    public boolean equals(Object other) {
        if (this == other) { return true; }

        return other instanceof ScimV2UsersUpdateBodyName && equalTo((ScimV2UsersUpdateBodyName) other);
    }

    private boolean equalTo(ScimV2UsersUpdateBodyName other) {
        return
            familyName.equals(other.familyName) &&

            givenName.equals(other.givenName)
            ;
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                   this.familyName,
                   this.givenName
               );
    }

    @Override
    public String toString() {
        return "ScimV2UsersUpdateBodyName{" +
               "familyName=" + familyName +
               "givenName=" + givenName +
               '}';
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> familyName = Optional.empty();
        private Optional<String> givenName = Optional.empty();

        private Builder() {}

        public Builder from(ScimV2UsersUpdateBodyName other) {
            familyName(other.getFamilyName());
            givenName(other.getGivenName());
            return this;
        }

        /**
         * Sets value for `familyName`
         */
        @JsonSetter("familyName")
        public Builder familyName(String familyName) {
            this.familyName = Optional.ofNullable(familyName);

            return this;
        }

        public Builder familyName(Optional<String> familyName) {
            this.familyName = familyName;
            return this;
        }

        /**
         * Sets value for `givenName`
         */
        @JsonSetter("givenName")
        public Builder givenName(String givenName) {
            this.givenName = Optional.ofNullable(givenName);

            return this;
        }

        public Builder givenName(Optional<String> givenName) {
            this.givenName = givenName;
            return this;
        }


        public ScimV2UsersUpdateBodyName build() {
            return new ScimV2UsersUpdateBodyName(
                       familyName,
                       givenName
                   );
        }
    }

}



