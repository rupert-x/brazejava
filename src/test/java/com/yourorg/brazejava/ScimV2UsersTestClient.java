
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava;

import java.util.List;

import com.yourorg.brazejava.core.ApiException;
import com.yourorg.brazejava.model.ScimV2UsersCreateBody;
import com.yourorg.brazejava.model.ScimV2UsersCreateBodyName;
import com.yourorg.brazejava.model.ScimV2UsersCreateBodyPermissions;
import com.yourorg.brazejava.model.ScimV2UsersCreateBodyPermissionsAppGroupItem;
import com.yourorg.brazejava.model.ScimV2UsersCreateBodyPermissionsAppGroupItemTeamItem;
import com.yourorg.brazejava.model.ScimV2UsersUpdateBody;
import com.yourorg.brazejava.model.ScimV2UsersUpdateBodyName;
import com.yourorg.brazejava.model.ScimV2UsersUpdateBodyPermissions;
import com.yourorg.brazejava.model.ScimV2UsersUpdateBodyPermissionsAppGroupItem;
import com.yourorg.brazejava.model.ScimV2UsersUpdateBodyPermissionsAppGroupItemTeamItem;
import com.yourorg.brazejava.resources.scim.v2.users.params.CreateRequest;
import com.yourorg.brazejava.resources.scim.v2.users.params.DeleteRequest;
import com.yourorg.brazejava.resources.scim.v2.users.params.GetRequest;
import com.yourorg.brazejava.resources.scim.v2.users.params.ListRequest;
import com.yourorg.brazejava.resources.scim.v2.users.params.UpdateRequest;
import org.junit.jupiter.api.Test;


public final class ScimV2UsersTestClient {
    @Test
    void testDelete200SuccessAllParams() {
        Client client = Client
                        .builder()
                        .environment(Environment.MOCK_SERVER)
                        .withBearerAuth("API_TOKEN")
                        .build();

        try {
            client.scim().v2().users().delete(DeleteRequest
                                              .builder()
                                              .id("string")
                                              .build());
        } catch (ApiException e) {
            System.err.println("Error msg: " + e.toString());
            throw e;
        }
    }
    @Test
    void testList200SuccessAllParams() {
        Client client = Client
                        .builder()
                        .environment(Environment.MOCK_SERVER)
                        .withBearerAuth("API_TOKEN")
                        .build();

        try {
            client.scim().v2().users().list(ListRequest
                                            .builder()
                                            .filter("{userName@example.com}")
                                            .build());
        } catch (ApiException e) {
            System.err.println("Error msg: " + e.toString());
            throw e;
        }
    }
    @Test
    void testList200SuccessRequiredOnly() {
        Client client = Client
                        .builder()
                        .environment(Environment.MOCK_SERVER)
                        .withBearerAuth("API_TOKEN")
                        .build();

        try {
            client.scim().v2().users().list(ListRequest
                                            .builder()
                                            .filter("{userName@example.com}")
                                            .build());
        } catch (ApiException e) {
            System.err.println("Error msg: " + e.toString());
            throw e;
        }
    }
    @Test
    void testGet200SuccessAllParams() {
        Client client = Client
                        .builder()
                        .environment(Environment.MOCK_SERVER)
                        .withBearerAuth("API_TOKEN")
                        .build();

        try {
            client.scim().v2().users().get(GetRequest
                                           .builder()
                                           .id("string")
                                           .build());
        } catch (ApiException e) {
            System.err.println("Error msg: " + e.toString());
            throw e;
        }
    }
    @Test
    void testCreate200SuccessAllParams() {
        Client client = Client
                        .builder()
                        .environment(Environment.MOCK_SERVER)
                        .withBearerAuth("API_TOKEN")
                        .build();

        try {
            client.scim().v2().users().create(CreateRequest
                                              .builder()
                                              .data(ScimV2UsersCreateBody
                                                    .builder()
                                                    .department("string")
                                                    .name(ScimV2UsersCreateBodyName
                                                            .builder()
                                                            .familyName("string")
                                                            .givenName("string")
                                                            .build())
                                                    .permissions(ScimV2UsersCreateBodyPermissions
                                                            .builder()
                                                            .appGroup(List.of(
                                                                    ScimV2UsersCreateBodyPermissionsAppGroupItem
                                                                    .builder()
                                                                    .appGroupName("string")
                                                                    .appGroupPermissions(List.of(
                                                                            "string"
                                                                            ))
                                                                    .team(List.of(
                                                                            ScimV2UsersCreateBodyPermissionsAppGroupItemTeamItem
                                                                            .builder()
                                                                            .teamName("string")
                                                                            .teamPermissions(List.of(
                                                                                    "string"
                                                                                    ))
                                                                            .build()
                                                                            ))
                                                                    .build()
                                                                    ))
                                                            .companyPermissions(List.of(
                                                                    "string"
                                                                    ))
                                                            .build())
                                                    .schemas(List.of(
                                                            "string"
                                                            ))
                                                    .userName("mail@example.com")
                                                    .build())
                                              .build());
        } catch (ApiException e) {
            System.err.println("Error msg: " + e.toString());
            throw e;
        }
    }
    @Test
    void testUpdate200SuccessAllParams() {
        Client client = Client
                        .builder()
                        .environment(Environment.MOCK_SERVER)
                        .withBearerAuth("API_TOKEN")
                        .build();

        try {
            client.scim().v2().users().update(UpdateRequest
                                              .builder()
                                              .data(ScimV2UsersUpdateBody
                                                    .builder()
                                                    .department("string")
                                                    .name(ScimV2UsersUpdateBodyName
                                                            .builder()
                                                            .familyName("string")
                                                            .givenName("string")
                                                            .build())
                                                    .permissions(ScimV2UsersUpdateBodyPermissions
                                                            .builder()
                                                            .appGroup(List.of(
                                                                    ScimV2UsersUpdateBodyPermissionsAppGroupItem
                                                                    .builder()
                                                                    .appGroupName("string")
                                                                    .appGroupPermissions(List.of(
                                                                            "string"
                                                                            ))
                                                                    .team(List.of(
                                                                            ScimV2UsersUpdateBodyPermissionsAppGroupItemTeamItem
                                                                            .builder()
                                                                            .teamName("string")
                                                                            .teamPermissions(List.of(
                                                                                    "string"
                                                                                    ))
                                                                            .build()
                                                                            ))
                                                                    .build()
                                                                    ))
                                                            .companyPermissions(List.of(
                                                                    "string"
                                                                    ))
                                                            .build())
                                                    .schemas(List.of(
                                                            "string"
                                                            ))
                                                    .build())
                                              .id("string")
                                              .build());
        } catch (ApiException e) {
            System.err.println("Error msg: " + e.toString());
            throw e;
        }
    }
}
