
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava;

import java.util.List;

import com.yourorg.brazejava.core.ApiException;
import com.yourorg.brazejava.model.CatalogsCreateBody;
import com.yourorg.brazejava.model.CatalogsCreateBodyCatalogsItem;
import com.yourorg.brazejava.model.CatalogsCreateBodyCatalogsItemFieldsItem;
import com.yourorg.brazejava.resources.catalogs.params.CreateRequest;
import com.yourorg.brazejava.resources.catalogs.params.DeleteRequest;
import org.junit.jupiter.api.Test;


public final class CatalogsTestClient {
    @Test
    void testDelete200SuccessAllParams() {
        Client client = Client
                        .builder()
                        .environment(Environment.MOCK_SERVER)
                        .withBearerAuth("API_TOKEN")
                        .build();

        try {
            client.catalogs().delete(DeleteRequest
                                     .builder()
                                     .catalogName("string")
                                     .build());
        } catch (ApiException e) {
            System.err.println("Error msg: " + e.toString());
            throw e;
        }
    }
    @Test
    void testList200SuccessAllParams() {
        Client client = Client
                        .builder()
                        .environment(Environment.MOCK_SERVER)
                        .withBearerAuth("API_TOKEN")
                        .build();

        try {
            client.catalogs().list();
        } catch (ApiException e) {
            System.err.println("Error msg: " + e.toString());
            throw e;
        }
    }
    @Test
    void testCreate200SuccessAllParams() {
        Client client = Client
                        .builder()
                        .environment(Environment.MOCK_SERVER)
                        .withBearerAuth("API_TOKEN")
                        .build();

        try {
            client.catalogs().create(CreateRequest
                                     .builder()
                                     .data(CatalogsCreateBody
                                           .builder()
                                           .catalogs(List.of(
                                                   CatalogsCreateBodyCatalogsItem
                                                   .builder()
                                                   .description("string")
                                                   .fields(List.of(
                                                           CatalogsCreateBodyCatalogsItemFieldsItem
                                                           .builder()
                                                           .name("string")
                                                           .type("string")
                                                           .build()
                                                           ))
                                                   .name("string")
                                                   .build()
                                                   ))
                                           .build())
                                     .build());
        } catch (ApiException e) {
            System.err.println("Error msg: " + e.toString());
            throw e;
        }
    }
}
