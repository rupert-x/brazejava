
/**
 * Generated by Sideko (sideko.dev)
 **/


package com.yourorg.brazejava;

import java.util.List;
import java.util.Map;

import com.yourorg.brazejava.core.ApiException;
import com.yourorg.brazejava.model.MessagesScheduleCreateCreateBody;
import com.yourorg.brazejava.model.MessagesScheduleCreateCreateBodyAudience;
import com.yourorg.brazejava.model.MessagesScheduleCreateCreateBodyMessages;
import com.yourorg.brazejava.model.MessagesScheduleCreateCreateBodySchedule;
import com.yourorg.brazejava.model.MessagesScheduleCreateCreateBodyUserAliases;
import com.yourorg.brazejava.resources.messages.schedule.create.params.CreateRequest;
import org.junit.jupiter.api.Test;


public final class MessagesScheduleCreateTestClient {
    @Test
    void testCreate200SuccessAllParams() {
        Client client = Client
                        .builder()
                        .environment(Environment.MOCK_SERVER)
                        .withBearerAuth("API_TOKEN")
                        .build();

        try {
            client.messages().schedule().create().create(CreateRequest
                    .builder()
                    .data(MessagesScheduleCreateCreateBody
                          .builder()
                          .audience(MessagesScheduleCreateCreateBodyAudience
                                    .builder()
                                    .and(List.of(
                                             Map.ofEntries(

                                             )
                                         ))
                                    .build())
                          .broadcast(true)
                          .campaignId("string")
                          .externalUserIds("string")
                          .messages(MessagesScheduleCreateCreateBodyMessages
                                    .builder()
                                    .androidPush(Map.ofEntries(

                                                 ))
                                    .applePush(Map.ofEntries(

                                               ))
                                    .contentCard(Map.ofEntries(

                                                 ))
                                    .email(Map.ofEntries(

                                           ))
                                    .kindlePush(Map.ofEntries(

                                                ))
                                    .webPush(Map.ofEntries(

                                             ))
                                    .webhook(Map.ofEntries(

                                             ))
                                    .windows8Push(Map.ofEntries(

                                                  ))
                                    .windowsPush(Map.ofEntries(

                                                 ))
                                    .build())
                          .overrideMessagingLimits(true)
                          .recipientSubscriptionState("string")
                          .schedule(MessagesScheduleCreateCreateBodySchedule
                                    .builder()
                                    .atOptimalTime(true)
                                    .inLocalTime(true)
                                    .time("string")
                                    .build())
                          .segmentId("string")
                          .sendId("string")
                          .userAliases(MessagesScheduleCreateCreateBodyUserAliases
                                       .builder()
                                       .aliasLabel("string")
                                       .aliasName("string")
                                       .build())
                          .build())
                    .build());
        } catch (ApiException e) {
            System.err.println("Error msg: " + e.toString());
            throw e;
        }
    }
}
